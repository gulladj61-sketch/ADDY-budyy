<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>ADDY ‚Äî Super Free AI Hub (Part-1)</title>
  <meta name="description" content="ADDY Part-1: Photo Editor, Voice Reader, Text Tools, Drawing Canvas. Client-side, no API keys.">
  <style>
    :root{
      --bg:#041021; --card:#072033; --accent:#00d4ff; --accent2:#4ce6a1; --muted:#9fb7d8;
      --glass: rgba(255,255,255,0.03);
      --maxw:1100px;
    }
    *{box-sizing:border-box}
    html,body{height:100%;margin:0;background:linear-gradient(180deg,#03111b 0%, #02101a 100%);color:#e6f7ff;font-family:Inter,system-ui,Segoe UI,Roboto,Arial,sans-serif}
    a{color:var(--accent)}
    .wrap{max-width:var(--maxw);margin:14px auto;padding:12px}
    header{display:flex;gap:12px;align-items:center;justify-content:space-between;flex-wrap:wrap}
    header h1{margin:0;font-size:20px;color:var(--accent)}
    header .sub{color:var(--muted);font-size:13px}
    nav.tabs{display:flex;gap:8px;flex-wrap:wrap;margin-top:10px}
    nav .tab{padding:8px 12px;border-radius:8px;background:transparent;border:1px solid rgba(255,255,255,0.02);cursor:pointer;color:var(--muted)}
    nav .tab.active{background:linear-gradient(90deg,var(--accent),var(--accent2));color:#012827;font-weight:700}
    .card{background:var(--card);border-radius:12px;padding:12px;box-shadow:0 6px 30px rgba(0,0,0,0.6);border:1px solid rgba(255,255,255,0.03);margin-top:12px}
    .grid{display:grid;grid-template-columns:1fr 360px;gap:14px;margin-top:12px}
    @media(max-width:980px){.grid{grid-template-columns:1fr} .side{order:2}}
    .small{font-size:13px;color:var(--muted)}
    label{font-size:13px;color:#cfe9ff;margin-bottom:6px;display:block}
    input,select,button,textarea{font-family:inherit}
    .row{display:flex;gap:10px;flex-wrap:wrap}
    .btn{background:var(--accent);border:none;color:#022429;padding:8px 12px;border-radius:8px;cursor:pointer;font-weight:700}
    .btn.alt{background:#183043;color:#fff}
    canvas{display:block;max-width:100%;border-radius:8px;background:#000;margin-top:10px;border:1px solid rgba(255,255,255,0.03)}
    textarea{width:100%;min-height:90px;border-radius:8px;background:transparent;color:#eaf7ff;border:1px solid rgba(255,255,255,0.04);padding:8px}
    .muted{color:var(--muted);font-size:13px}
    .hint{font-size:12px;color:var(--muted)}
    footer{margin-top:16px;color:var(--muted);font-size:13px;text-align:center}
    .control{margin-top:8px}
    .flex{display:flex;gap:8px;align-items:center}
    .col{display:flex;flex-direction:column;gap:8px}
    .kbd{background:var(--glass);padding:5px 8px;border-radius:6px;color:var(--muted);font-size:13px}
    .progress{height:8px;background:rgba(255,255,255,0.03);border-radius:6px;overflow:hidden;margin-top:6px}
    .progress > i{display:block;height:100%;background:linear-gradient(90deg,#00d4ff,#4ce6a1);width:0%}
    .logo{width:44px;height:44px;border-radius:10px;background:linear-gradient(135deg,#00d4ff,#4ce6a1);display:flex;align-items:center;justify-content:center;font-weight:800;color:#012827}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div style="display:flex;gap:12px;align-items:center;">
        <div class="logo">AD</div>
        <div>
          <h1>ADDY ‚Äî Super Free AI Hub (Part-1)</h1>
          <div class="sub">Photo Editor ‚Ä¢ Voice Reader ‚Ä¢ Text Tools ‚Ä¢ Drawing Canvas ‚Äî No API keys</div>
        </div>
      </div>
      <div class="muted">Use Chrome on mobile for best compatibility</div>
    </header>

    <nav class="tabs" id="tabs">
      <div class="tab active" data-tab="editor">Image Editor</div>
      <div class="tab" data-tab="voice">Voice Reader</div>
      <div class="tab" data-tab="text">Text Tools</div>
      <div class="tab" data-tab="draw">Drawing</div>
      <div class="tab" data-tab="help">Help</div>
    </nav>

    <div id="content">
      <!-- EDITOR -->
      <div class="card" id="editor" style="display:block">
        <div style="display:flex;justify-content:space-between;align-items:center">
          <div>
            <h2 style="margin:0">üñºÔ∏è Photo Editor</h2>
            <div class="small">Upload, filter, crop, auto-enhance, download ‚Äî client-side only.</div>
          </div>
          <div class="hint">Tip: Use fit & auto-enhance for better OCR later</div>
        </div>
        <hr/>
        <div class="row">
          <div style="flex:1">
            <label>Upload image</label>
            <input id="fileEditor" type="file" accept="image/*">
            <div class="control row" style="margin-top:8px">
              <button id="fitCanvas" class="btn alt">Fit</button>
              <button id="resetImg" class="btn alt">Reset</button>
              <button id="downloadImg" class="btn">Download PNG</button>
            </div>
          </div>
          <div style="width:320px">
            <label>Quick Presets</label>
            <div class="row">
              <button class="btn" id="preset-natural">Natural</button>
              <button class="btn alt" id="preset-vivid">Vivid</button>
              <button class="btn" id="preset-bw">B/W</button>
            </div>
            <div class="hint" style="margin-top:8px">Use presets to quickly test looks.</div>
          </div>
        </div>

        <canvas id="editorCanvas"></canvas>

        <div style="display:flex;flex-wrap:wrap;gap:10px;margin-top:10px">
          <div style="min-width:160px">
            <label>Brightness</label>
            <input id="ed-bright" type="range" min="0" max="200" value="100">
          </div>
          <div style="min-width:160px">
            <label>Contrast</label>
            <input id="ed-contrast" type="range" min="0" max="200" value="100">
          </div>
          <div style="min-width:140px">
            <label>Saturate</label>
            <input id="ed-sat" type="range" min="0" max="200" value="100">
          </div>
          <div style="min-width:140px">
            <label>Blur</label>
            <input id="ed-blur" type="range" min="0" max="12" value="0">
          </div>
          <div style="min-width:120px">
            <label>Hue</label>
            <input id="ed-hue" type="range" min="0" max="360" value="0">
          </div>
          <div style="min-width:120px">
            <label>Tint</label>
            <input id="ed-tint" type="color" value="#ffffff">
          </div>
        </div>

        <div style="display:flex;gap:8px;align-items:center;margin-top:10px">
          <button id="applyEd" class="btn">Apply Filters</button>
          <button id="autoEnhanceBtn" class="btn alt">Auto Enhance</button>
          <button id="cropBtn" class="btn alt">Crop</button>
          <div style="flex:1"></div>
          <div class="muted">Current image: <span id="imgInfo">none</span></div>
        </div>
      </div>

      <!-- VOICE -->
      <div class="card" id="voice" style="display:none">
        <div style="display:flex;justify-content:space-between;align-items:center">
          <div>
            <h2 style="margin:0">üîä Voice Reader (Text ‚Üí Speech)</h2>
            <div class="small">Use browser speechSynthesis to read text aloud. Works offline.</div>
          </div>
          <div class="hint">Choose language/voice and press Read</div>
        </div>
        <hr/>
        <label>Paste text to read</label>
        <textarea id="voiceText" placeholder="Type or paste text..."></textarea>

        <div style="display:flex;gap:8px;flex-wrap:wrap;margin-top:8px">
          <label style="display:flex;align-items:center;gap:8px">Voice<select id="voiceSelect"></select></label>
          <label style="display:flex;align-items:center;gap:8px">Rate <input id="rate" type="range" min="0.5" max="2" step="0.1" value="1"></label>
          <label style="display:flex;align-items:center;gap:8px">Pitch <input id="pitch" type="range" min="0.5" max="2" step="0.1" value="1"></label>
          <button id="readBtn" class="btn">Read</button>
          <button id="stopRead" class="btn alt">Stop</button>
        </div>

        <div class="hint" style="margin-top:8px">Tip: Use short paragraphs for best results on mobile.</div>
      </div>

      <!-- TEXT -->
      <div class="card" id="text" style="display:none">
        <div style="display:flex;justify-content:space-between;align-items:center">
          <div>
            <h2 style="margin:0">‚úÇÔ∏è Text Tools</h2>
            <div class="small">Summarize, Paraphrase, Copy, Auto-save.</div>
          </div>
          <div class="hint">Autosaves to localStorage</div>
        </div>
        <hr/>
        <label>Input / Paste article</label>
        <textarea id="textInput" placeholder="Paste long text here..."></textarea>

        <div style="display:flex;gap:8px;margin-top:8px">
          <button id="summBtn" class="btn">Summarize (3 sentences)</button>
          <button id="paraBtn" class="btn alt">Paraphrase (simple)</button>
          <button id="copyText" class="btn">Copy Output</button>
          <button id="clearText" class="btn alt">Clear</button>
        </div>

        <label style="margin-top:8px">Output</label>
        <textarea id="textOutput" placeholder="Output will appear here..."></textarea>
        <div class="hint" style="margin-top:6px">Press Summarize to get extractive summary (client-side)</div>
      </div>

      <!-- DRAW -->
      <div class="card" id="draw" style="display:none">
        <div style="display:flex;justify-content:space-between;align-items:center">
          <div>
            <h2 style="margin:0">üé® Drawing Canvas</h2>
            <div class="small">Draw, stickers, export PNG ‚Äî client-only.</div>
          </div>
          <div class="hint">Use finger (mobile) to draw</div>
        </div>
        <hr/>
        <div style="display:flex;gap:8px;align-items:center;flex-wrap:wrap">
          <label>Canvas Size <select id="drawSize"><option value="800">800x600</option><option value="600">600x450</option><option value="400">400x300</option></select></label>
          <label>Brush <input id="brushSize" type="range" min="1" max="60" value="6"></label>
          <label>Color <input id="brushColor" type="color" value="#ffffff"></label>
          <button id="clearCanvas" class="btn alt">Clear</button>
          <button id="undoBtn" class="btn alt">Undo</button>
          <button id="saveDraw" class="btn">Export PNG</button>
        </div>
        <canvas id="drawCanvas" style="margin-top:10px;border:1px solid rgba(255,255,255,0.04);border-radius:8px"></canvas>
        <div class="hint" style="margin-top:8px">You can drag images onto the canvas (desktop) or use sticker paste.</div>
      </div>

      <!-- HELP -->
      <div class="card" id="help" style="display:none">
        <h2 style="margin:0">‚ÑπÔ∏è Help & Next Steps</h2>
        <hr/>
        <div class="small">
          <ul>
            <li>Part-1 provides client-side tools only ‚Äî no API keys.</li>
            <li>Part-2 will add: BodyPix background remove, OCR export improvements, embed list of free HF spaces.</li>
            <li>Part-3 will add: QR, GrabCut, style transfer hooks, session manager & deploy pack generator.</li>
            <li>To make this production-ready (monetize), later we'll add serverless proxies and user auth (optional).</li>
          </ul>
        </div>
      </div>
    </div>

    <div class="grid" style="margin-top:12px">
      <div class="card">
        <h3 style="margin:0">Quick Actions</h3>
        <hr/>
        <div style="display:flex;gap:8px;flex-wrap:wrap">
          <button id="clearAllBtn" class="btn alt">Clear All</button>
          <button id="exportSession" class="btn">Export Session</button>
          <button id="importSession" class="btn alt">Import Session</button>
          <input type="file" id="importFile" accept=".json" style="display:none">
        </div>
        <label style="margin-top:10px">Session Notes</label>
        <textarea id="sessionNotes" placeholder="Notes..."></textarea>
      </div>

      <aside class="side card">
        <h3 style="margin:0">Tips</h3>
        <hr/>
        <div class="small">
          ‚Ä¢ Use Fit before removing background in future parts.<br>
          ‚Ä¢ Use Auto-enhance for OCR clarity.<br>
          ‚Ä¢ Save sessions to continue later.<br>
          ‚Ä¢ For voice, choose appropriate voice in dropdown.<br>
        </div>
        <div style="margin-top:12px;display:flex;gap:8px;flex-wrap:wrap">
          <button id="nextPart" class="btn">Request Part-2</button>
          <button id="askDeploy" class="btn alt">Make GitHub Pack</button>
        </div>
      </aside>
    </div>

    <footer>Made with ‚ù§Ô∏è ‚Äî ADDY Part-1 ‚Äî paste into index.html and commit. Reply "next" to get Part-2.</footer>
  </div>

<script>
/* -----------------------
   ADDY Part-1 JS
   - Editor, Voice Reader, Text Tools, Drawing canvas
   - Client-side only; no external API keys
   ----------------------- */

/* Utilities */
const $ = id => document.getElementById(id);
const qs = s => document.querySelector(s);
function showTab(name){
  ['editor','voice','text','draw','help'].forEach(t=>{
    const el = $(t); if(el) el.style.display = (t===name? 'block':'none');
    // tabs
    document.querySelectorAll('#tabs .tab').forEach(tab=>{
      tab.classList.toggle('active', tab.dataset.tab===name);
    });
  });
}

/* Tab nav */
document.querySelectorAll('#tabs .tab').forEach(tab=>{
  tab.addEventListener('click', ()=> showTab(tab.dataset.tab));
});

/* ------------------ Photo Editor ------------------ */
const fileEditor = $('fileEditor'), editorCanvas = $('editorCanvas'), ectx = editorCanvas.getContext('2d');
let edImg = new Image(), edOriginal = null, edCurrentData = null;

function fitEditorCanvas(maxW=900){
  const w = Math.min(window.innerWidth-40, maxW);
  if(!edImg.src) return;
  const ratio = edImg.naturalHeight / edImg.naturalWidth;
  editorCanvas.width = w;
  editorCanvas.height = Math.round(w * ratio);
  drawEditor();
}

fileEditor.addEventListener('change', (e)=>{
  const f = e.target.files[0]; if(!f) return;
  const reader = new FileReader();
  reader.onload = ev=>{
    edImg = new Image();
    edImg.onload = ()=> { edOriginal = ev.target.result; fitEditorCanvas(); $('imgInfo').innerText = edImg.naturalWidth + 'x' + edImg.naturalHeight; };
    edImg.src = ev.target.result;
  };
  reader.readAsDataURL(f);
});

window.addEventListener('resize', ()=> fitEditorCanvas());

function drawEditor(){
  if(!edImg.src) return;
  ectx.clearRect(0,0,editorCanvas.width,editorCanvas.height);
  const b = $('ed-bright').value, c = $('ed-contrast').value, s = $('ed-sat').value, bl = $('ed-blur').value, hue = $('ed-hue').value;
  const filter = `brightness(${b}%) contrast(${c}%) saturate(${s}%) blur(${bl}px) hue-rotate(${hue}deg)`;
  ectx.filter = filter;
  ectx.drawImage(edImg, 0,0, editorCanvas.width, editorCanvas.height);
  ectx.filter = 'none';
  const tint = $('ed-tint').value;
  if(tint && tint !== '#ffffff'){
    ectx.fillStyle = tint + '33';
    ectx.fillRect(0,0,editorCanvas.width,editorCanvas.height);
  }
  try{ edCurrentData = editorCanvas.toDataURL('image/png'); }catch(e){ console.log('ed toDataURL failed', e); }
}

['ed-bright','ed-contrast','ed-sat','ed-blur','ed-hue'].forEach(id=> $(id).addEventListener('input', drawEditor));
$('ed-tint').addEventListener('input', drawEditor);

$('fitCanvas').addEventListener('click', ()=> fitEditorCanvas());
$('resetImg').addEventListener('click', ()=> { if(edOriginal){ edImg.src = edOriginal; fitEditorCanvas(); }});
$('downloadImg').addEventListener('click', ()=> {
  if(!edCurrentData && edOriginal) { edImg.src = edOriginal; fitEditorCanvas(); }
  if(!edCurrentData) return alert('Upload image first');
  const a = document.createElement('a'); a.href = edCurrentData; a.download = 'addy_edit.png'; a.click();
});

/* presets */
$('preset-natural').addEventListener('click', ()=>{
  $('ed-bright').value=100; $('ed-contrast').value=100; $('ed-sat').value=100; $('ed-blur').value=0; $('ed-hue').value=0; $('ed-tint').value='#ffffff'; drawEditor();
});
$('preset-vivid').addEventListener('click', ()=>{
  $('ed-bright').value=110; $('ed-contrast').value=120; $('ed-sat').value=140; $('ed-blur').value=0; $('ed-hue').value=0; $('ed-tint').value='#ffffff'; drawEditor();
});
$('preset-bw').addEventListener('click', ()=>{ $('ed-sat').value=0; $('ed-contrast').value=110; $('ed-bright').value=95; $('ed-tint').value='#ffffff'; drawEditor();});

/* auto-enhance */
$('autoEnhanceBtn').addEventListener('click', ()=>{
  if(!edImg.src) return alert('Upload an image first');
  // simple histogram stretch on a temp canvas
  const tmp = document.createElement('canvas'); tmp.width = edImg.naturalWidth; tmp.height = edImg.naturalHeight;
  const tctx = tmp.getContext('2d'); tctx.drawImage(edImg,0,0);
  const imgd = tctx.getImageData(0,0,tmp.width,tmp.height);
  let rmin=255,gmin=255,bmin=255, rmax=0,gmax=0,bmax=0;
  for(let i=0;i<imgd.data.length;i+=4){
    const r=imgd.data[i], g=imgd.data[i+1], b=imgd.data[i+2];
    if(r<rmin) rmin=r; if(g<gmin) gmin=g; if(b<bmin) bmin=b;
    if(r>rmax) rmax=r; if(g>gmax) gmax=g; if(b>bmax) bmax=b;
  }
  for(let i=0;i<imgd.data.length;i+=4){
    imgd.data[i] = Math.round((imgd.data[i]-rmin)/(rmax-rmin||1)*255);
    imgd.data[i+1] = Math.round((imgd.data[i+1]-gmin)/(gmax-gmin||1)*255);
    imgd.data[i+2] = Math.round((imgd.data[i+2]-bmin)/(bmax-bmin||1)*255);
  }
  tctx.putImageData(imgd,0,0);
  edImg.src = tmp.toDataURL();
  edOriginal = edImg.src;
  fitEditorCanvas();
});

/* crop - simple center crop to square example */
$('cropBtn').addEventListener('click', ()=>{
  if(!edImg.src) return alert('Upload an image first');
  const tmp = document.createElement('canvas'); const min = Math.min(edImg.naturalWidth, edImg.naturalHeight);
  tmp.width = min; tmp.height = min;
  const tctx = tmp.getContext('2d');
  tctx.drawImage(edImg, (edImg.naturalWidth-min)/2, (edImg.naturalHeight-min)/2, min, min, 0,0,min,min);
  edImg.src = tmp.toDataURL();
  edOriginal = edImg.src;
  fitEditorCanvas();
});

/* ------------------ Voice Reader ------------------ */
const synth = window.speechSynthesis;
let voices = [];
function populateVoices(){
  voices = synth.getVoices();
  const sel = $('voiceSelect'); sel.innerHTML = '';
  voices.forEach(v=>{
    const opt = document.createElement('option'); opt.value = v.name; opt.textContent = `${v.name} (${v.lang})`;
    sel.appendChild(opt);
  });
}
if(synth.onvoiceschanged !== undefined) synth.onvoiceschanged = populateVoices;
populateVoices();

$('readBtn').addEventListener('click', ()=>{
  const text = $('voiceText').value || '';
  if(!text) return alert('Type some text first');
  if(synth.speaking) { synth.cancel(); }
  const ut = new SpeechSynthesisUtterance(text);
  const sel = $('voiceSelect').value;
  if(sel){
    const v = voices.find(x=>x.name===sel);
    if(v) ut.voice = v;
  }
  ut.rate = parseFloat($('rate').value);
  ut.pitch = parseFloat($('pitch').value);
  synth.speak(ut);
});
$('stopRead').addEventListener('click', ()=> synth.cancel());

/* ------------------ Text Tools ------------------ */
function simpleSummarize(text, maxSent=3){
  if(!text) return '';
  const sents = text.match(/[^\.!\?]+[\.!\?]+/g) || [text];
  const freq = {}; const stop = new Set(['the','is','and','a','an','of','to','in','that','it','for','on','with','as','are','was','be','by','this','i','you']);
  sents.forEach(sent=>{
    sent.toLowerCase().replace(/[^a-z0-9\s]/g,'').split(/\s+/).forEach(w=>{
      if(!w) return; if(stop.has(w)) return; freq[w] = (freq[w]||0)+1;
    });
  });
  const scores = sents.map(sent=>{
    let sc=0; sent.toLowerCase().replace(/[^a-z0-9\s]/g,'').split(/\s+/).forEach(w=>{ if(freq[w]) sc += freq[w]; }); return sc;
  });
  const idx = scores.map((v,i)=>[v,i]).sort((a,b)=>b[0]-a[0]).slice(0,maxSent).sort((a,b)=>a[1]-b[1]);
  return idx.map(x=>sents[x[1]].trim()).join(' ');
}
$('summBtn').addEventListener('click', ()=> {
  const t = $('textInput').value; $('textOutput').value = simpleSummarize(t,3);
});
$('paraBtn').addEventListener('click', ()=> {
  const t = $('textInput').value; if(!t) return alert('Paste text first');
  const map = {'important':'crucial','use':'utilize','help':'assist','buy':'purchase','get':'obtain','said':'stated','really':'truly','very':'extremely'};
  const out = t.replace(/\b(\w+)\b/g, (m)=> map[m.toLowerCase()] || m);
  $('textOutput').value = out;
});
$('copyText').addEventListener('click', ()=> navigator.clipboard.writeText($('textOutput').value).then(()=>alert('Copied')));
$('clearText').addEventListener('click', ()=> { $('textInput').value=''; $('textOutput').value=''; localStorage.removeItem('addy_text'); });

/* autosave text */
setInterval(()=> {
  const v = $('textInput').value || '';
  if(v && v.length>20) localStorage.setItem('addy_text', v);
}, 5000);
/* restore */
window.addEventListener('load', ()=> {
  const saved = localStorage.getItem('addy_text'); if(saved) $('textInput').value = saved;
});

/* ------------------ Drawing Canvas ------------------ */
const drawCanvas = $('drawCanvas'), dctx = drawCanvas.getContext('2d');
let drawState = { size: parseInt($('brushSize').value), color: $('brushColor').value, drawing:false, paths:[], undone:[] };

function initDrawCanvas(){
  const sz = parseInt($('drawSize').value);
  drawCanvas.width = sz; drawCanvas.height = Math.round(sz * 0.75);
  // clear
  dctx.fillStyle = '#021018'; dctx.fillRect(0,0,drawCanvas.width,drawCanvas.height);
  drawState.paths = []; drawState.undone = [];
}
initDrawCanvas();

function startDraw(x,y){ drawState.drawing = true; const p = {tool:'pen', color: drawState.color, size: drawState.size, points:[{x,y}]}; drawState.paths.push(p); }
function continueDraw(x,y){ if(!drawState.drawing) return; const p = drawState.paths[drawState.paths.length-1]; p.points.push({x,y}); redrawPaths(); }
function endDraw(){ drawState.drawing = false; }

function redrawPaths(){
  dctx.clearRect(0,0,drawCanvas.width,drawCanvas.height);
  dctx.fillStyle = '#021018'; dctx.fillRect(0,0,drawCanvas.width,drawCanvas.height);
  for(const stroke of drawState.paths){
    dctx.strokeStyle = stroke.color; dctx.lineWidth = stroke.size; dctx.lineJoin = 'round'; dctx.lineCap='round';
    dctx.beginPath();
    const pts = stroke.points;
    if(pts.length>0){ dctx.moveTo(pts[0].x, pts[0].y); for(let i=1;i<pts.length;i++){ dctx.lineTo(pts[i].x, pts[i].y); } dctx.stroke(); }
  }
}

drawCanvas.addEventListener('pointerdown', (e)=> {
  const rect = drawCanvas.getBoundingClientRect(); startDraw(e.clientX-rect.left, e.clientY-rect.top);
});
drawCanvas.addEventListener('pointermove', (e)=> {
  if(!drawState.drawing) return; const rect = drawCanvas.getBoundingClientRect(); continueDraw(e.clientX-rect.left, e.clientY-rect.top);
});
window.addEventListener('pointerup', ()=> endDraw());

$('brushSize').addEventListener('input', ()=> drawState.size = parseInt($('brushSize').value));
$('brushColor').addEventListener('input', ()=> drawState.color = $('brushColor').value);
$('drawSize').addEventListener('change', ()=> initDrawCanvas());
$('clearCanvas').addEventListener('click', ()=> { initDrawCanvas(); });
$('undoBtn').addEventListener('click', ()=> { if(drawState.paths.length) drawState.undone.push(drawState.paths.pop()); redrawPaths(); });
$('saveDraw').addEventListener('click', ()=> {
  const a = document.createElement('a'); a.href = drawCanvas.toDataURL('image/png'); a.download = 'addy_draw.png'; a.click();
});

/* ------------------ Session export/import & quick actions ------------------ */
$('clearAllBtn').addEventListener('click', ()=> {
  // clear editor, draw, text and voice
  edImg = new Image(); edOriginal = null; edCurrentData = null; try{ ectx.clearRect(0,0,editorCanvas.width,editorCanvas.height);}catch(e){}
  initDrawCanvas(); $('textInput').value=''; $('textOutput').value=''; $('voiceText').value=''; $('ocrResult') && ($('ocrResult').value='');
  alert('Cleared all (client only)');
});
$('exportSession').addEventListener('click', ()=> {
  const sess = { editor: edCurrentData || edOriginal, text: $('textInput').value, notes: $('sessionNotes').value, draw: drawCanvas.toDataURL() };
  const blob = new Blob([JSON.stringify(sess,null,2)], {type:'application/json'});
  const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = 'addy_session.json'; a.click();
});
$('importSession').addEventListener('click', ()=> $('importFile').click());
$('importFile').addEventListener('change', (e)=> {
  const f = e.target.files[0]; if(!f) return;
  const reader = new FileReader(); reader.onload = ev=>{
    try{
      const data = JSON.parse(ev.target.result);
      if(data.editor){ edImg = new Image(); edImg.onload = ()=> { edOriginal = data.editor; fitEditorCanvas(); }; edImg.src = data.editor; }
      if(data.draw){ const img = new Image(); img.onload = ()=> { dctx.clearRect(0,0,drawCanvas.width,drawCanvas.height); dctx.drawImage(img,0,0); }; img.src = data.draw; }
      $('textInput').value = data.text || ''; $('sessionNotes').value = data.notes || '';
      alert('Session imported');
    }catch(err){ alert('Import error: '+err.message); }
  }; reader.readAsText(f);
});

/* ------------------ Simple OCR placeholder (will add in Part-2 full Tesseract UI) ------------------ */
const ocrEl = $('ocrResult');
if(ocrEl) ocrEl.value = '';

/* ------------------ Request next part / deploy pack ------------------ */
$('nextPart').addEventListener('click', ()=> alert('I will prepare Part-2 (BodyPix, OCR improvements, embed list). Reply "next" if you want it now.'));
$('askDeploy').addEventListener('click', ()=> alert('I will prepare a GitHub-ready zip pack (index.html) for one-click upload. Reply "deploy" to request it.'));

window.addEventListener('load', ()=> {
  // set a tiny timeout to ensure voices populated
  setTimeout(()=> { if(speechSynthesis.getVoices().length) populateVoices(); }, 500);
  initDrawCanvas();
});

</script>
</body>
</html><!-- ADDY Part-2 (1/4): Enhance + Background Remove -->
<script>
/* ----------- 8K-style Image Enhancer (client-side pseudo upscaler) ----------- */
function enhanceImage(canvas){
  const ctx = canvas.getContext('2d');
  let imgData = ctx.getImageData(0,0,canvas.width,canvas.height);
  let d = imgData.data;

  // simple unsharp mask
  let blur = ctx.getImageData(0,0,canvas.width,canvas.height);
  const k=[1,2,1,2,4,2,1,2,1];
  for(let y=1;y<canvas.height-1;y++){
    for(let x=1;x<canvas.width-1;x++){
      for(let c=0;c<3;c++){
        let sum=0,idx=0;
        for(let ky=-1;ky<=1;ky++){
          for(let kx=-1;kx<=1;kx++){
            const i=((y+ky)*canvas.width+(x+kx))*4+c;
            sum+=blur.data[i]*k[idx++];
          }
        }
        const i2=(y*canvas.width+x)*4+c;
        const val=d[i2]+(d[i2]-sum/16)*0.5; // sharpen
        d[i2]=Math.min(255,Math.max(0,val));
      }
    }
  }
  // contrast stretch
  let rMin=255,rMax=0,gMin=255,gMax=0,bMin=255,bMax=0;
  for(let i=0;i<d.length;i+=4){
    const r=d[i],g=d[i+1],b=d[i+2];
    if(r<rMin)rMin=r;if(r>rMax)rMax=r;
    if(g<gMin)gMin=g;if(g>gMax)gMax=g;
    if(b<bMin)bMin=b;if(b>bMax)bMax=b;
  }
  for(let i=0;i<d.length;i+=4){
    d[i]=(d[i]-rMin)/(rMax-rMin||1)*255;
    d[i+1]=(d[i+1]-gMin)/(gMax-gMin||1)*255;
    d[i+2]=(d[i+2]-bMin)/(bMax-bMin||1)*255;
  }
  ctx.putImageData(imgData,0,0);
  alert("Enhanced (pseudo-8K look)");
}
const enhanceBtn = document.createElement('button');
enhanceBtn.textContent="Ultra Enhance (8K-style)";
enhanceBtn.className="btn";
enhanceBtn.onclick=()=> enhanceImage(editorCanvas);
$('applyEd').after(enhanceBtn);

/* ----------- Background Remove (BodyPix lite) ----------- */
async function loadBodyPix(){
  if(window.bodyPixLoaded) return window.bodyPixNet;
  const script=document.createElement('script');
  script.src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.15.0/dist/tf.min.js";
  document.body.appendChild(script);
  await new Promise(r=>script.onload=r);
  const script2=document.createElement('script');
  script2.src="https://cdn.jsdelivr.net/npm/@tensorflow-models/body-pix@2.2.0";
  document.body.appendChild(script2);
  await new Promise(r=>script2.onload=r);
  window.bodyPixLoaded=true;
  window.bodyPixNet=await bodyPix.load();
  return window.bodyPixNet;
}

async function removeBg(){
  if(!edImg.src) return alert('Upload an image first');
  const net = await loadBodyPix();
  const tmp=document.createElement('canvas');
  tmp.width=edImg.naturalWidth; tmp.height=edImg.naturalHeight;
  const ctx2=tmp.getContext('2d');
  ctx2.drawImage(edImg,0,0);
  const segmentation=await net.segmentPerson(tmp);
  const imageData=ctx2.getImageData(0,0,tmp.width,tmp.height);
  for(let i=0;i<segmentation.data.length;i++){
    if(segmentation.data[i]===0) imageData.data[i*4+3]=0;
  }
  ctx2.putImageData(imageData,0,0);
  edImg.src=tmp.toDataURL();
  edOriginal=edImg.src;
  fitEditorCanvas();
  alert("Background removed (BodyPix)");
}
const bgBtn=document.createElement('button');
bgBtn.textContent="Remove BG (Lite)";
bgBtn.className="btn alt";
bgBtn.onclick=removeBg;
$('applyEd').after(bgBtn);
</script>
<!-- END Part-2 (1/4) --><!-- ADDY Part-2 (2/4): OCR + Palette Extractor + Auto-Backup -->
<script>
/* ================= OCR (Tesseract.js lite) ================= */
async function loadTesseract(){
  if(window.TessLoaded) return window.Tesseract;
  const s=document.createElement('script');
  s.src="https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js";
  document.body.appendChild(s);
  await new Promise(r=>s.onload=r);
  window.TessLoaded=true;
  return window.Tesseract;
}
async function runOCR(){
  if(!edImg.src) return alert("Upload an image first");
  const T=await loadTesseract();
  const worker=T.createWorker();
  await worker.loadLanguage('eng');
  await worker.initialize('eng');
  const result=await worker.recognize(edImg.src);
  await worker.terminate();
  const txt=result.data.text.trim();
  if(!txt){alert("No text found");return;}
  localStorage.setItem('addy_ocr',txt);
  alert("OCR Done ‚úì  Text copied below output box");
  // create output area if not exists
  let box=document.getElementById('ocrBox');
  if(!box){
    box=document.createElement('textarea');
    box.id='ocrBox';
    box.placeholder='Extracted text will appear here...';
    box.style.width='100%';box.style.minHeight='120px';
    box.style.marginTop='10px';box.style.background='rgba(255,255,255,0.03)';
    box.style.color='#fff';
    $('editor').appendChild(box);
  }
  box.value=txt;
}
const ocrBtn=document.createElement('button');
ocrBtn.textContent="Run OCR (Read Text)";
ocrBtn.className="btn";
ocrBtn.onclick=runOCR;
$('applyEd').after(ocrBtn);

/* ================= Palette Extractor ================= */
function extractPalette(){
  if(!edImg.src) return alert("Upload an image first");
  const ctx=editorCanvas.getContext('2d');
  const imgData=ctx.getImageData(0,0,editorCanvas.width,editorCanvas.height).data;
  const colors={}, step=20;
  for(let i=0;i<imgData.length;i+=4*step){
    const r=imgData[i],g=imgData[i+1],b=imgData[i+2];
    const key=`${r>>4}${g>>4}${b>>4}`;
    colors[key]={r,g,b};
  }
  const keys=Object.keys(colors).slice(0,12);
  let wrap=document.getElementById('paletteWrap');
  if(!wrap){
    wrap=document.createElement('div');
    wrap.id='paletteWrap';
    wrap.style.display='flex';
    wrap.style.flexWrap='wrap';
    wrap.style.marginTop='10px';
    $('editor').appendChild(wrap);
  }
  wrap.innerHTML='';
  keys.forEach(k=>{
    const {r,g,b}=colors[k];
    const hex="#"+[r,g,b].map(x=>x.toString(16).padStart(2,'0')).join('');
    const box=document.createElement('div');
    box.style.width='60px';box.style.height='60px';
    box.style.borderRadius='8px';
    box.style.margin='4px';
    box.style.background=hex;
    box.title=hex;
    box.onclick=()=>{navigator.clipboard.writeText(hex);alert(`Copied ${hex}`);};
    wrap.appendChild(box);
  });
  alert("Palette generated ‚Äî tap a color to copy its HEX");
}
const palBtn=document.createElement('button');
palBtn.textContent="Palette Extract";
palBtn.className="btn alt";
palBtn.onclick=extractPalette;
$('applyEd').after(palBtn);

/* ================= Auto-Backup / Restore ================= */
function autoSave(){
  try{
    const session={
      img:edCurrentData||edOriginal,
      text:$('textInput').value,
      notes:$('sessionNotes').value
    };
    localStorage.setItem('addy_auto',JSON.stringify(session));
  }catch(e){console.warn('autosave fail',e);}
}
setInterval(autoSave,15000);
window.addEventListener('load',()=>{
  const d=localStorage.getItem('addy_auto');
  if(!d)return;
  try{
    const s=JSON.parse(d);
    if(s.img){edImg=new Image();edImg.onload=()=>{edOriginal=s.img;fitEditorCanvas();};edImg.src=s.img;}
    if(s.text)$('textInput').value=s.text;
    if(s.notes)$('sessionNotes').value=s.notes;
  }catch(e){console.log('restore fail',e);}
});
</script>
<!-- END Part-2 (2/4) --><!-- ADDY Part-2 (3/4): AI Chat (local) + HF Embed option + QR Gen/Scan + Quotes widget -->
<!-- Paste this block before </body> in your index.html -->
<script src="https://cdn.jsdelivr.net/npm/qrcodejs@1.0.0/qrcode.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

<script>
/* ========== ADDY: Chat + QR + Quotes Module ========== */

/* Helper to create tabs & content dynamically (adds "Chat" tab) */
(function createChatTab(){
  try{
    const tabs = document.getElementById('tabs');
    if(!tabs) return console.warn('Tabs element not found ‚Äî ensure Part-1 present');
    // avoid duplicate
    if(document.querySelector('.tab[data-tab="chat"]')) return;
    const chatTab = document.createElement('div');
    chatTab.className='tab';
    chatTab.dataset.tab='chat';
    chatTab.textContent='AI Chat';
    tabs.appendChild(chatTab);
    chatTab.addEventListener('click', ()=> {
      // activate tab UI (reuse existing showTab if available)
      if(typeof showTab === 'function'){ showTab('chat'); }
      else {
        // fallback: hide others, show created
        ['editor','voice','text','draw','help','chat'].forEach(t=>{
          const el = document.getElementById(t);
          if(el) el.style.display = (t==='chat' ? 'block' : 'none');
        });
        document.querySelectorAll('#tabs .tab').forEach(tab=> tab.classList.toggle('active', tab===chatTab));
      }
    });

    // create chat content card
    const contentWrap = document.getElementById('content') || document.body;
    const chatCard = document.createElement('div');
    chatCard.className='card';
    chatCard.id='chat';
    chatCard.style.display='none';
    chatCard.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center">
        <div>
          <h2 style="margin:0">ü§ñ ADDY Chat (Local)</h2>
          <div class="small">Offline-friendly assistant + option to embed a live HF Space chat.</div>
        </div>
        <div class="hint">Tip: Use "Embed HF Chat" to connect a public Space (no key)</div>
      </div>
      <hr/>
      <div style="display:flex;gap:12px;flex-wrap:wrap">
        <div style="flex:1;min-width:320px">
          <div id="chatBox" style="height:360px;overflow:auto;border-radius:8px;padding:12px;background:rgba(255,255,255,0.02);border:1px solid rgba(255,255,255,0.03)"></div>
          <div style="display:flex;gap:8px;margin-top:8px">
            <input id="chatInput" placeholder="Type a message..." style="flex:1;padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);background:transparent;color:#eaf7ff">
            <button id="sendChat" class="btn">Send</button>
            <button id="gptEmbedBtn" class="btn alt">Embed HF Chat</button>
          </div>
          <div style="display:flex;gap:8px;margin-top:8px">
            <button id="quickHello" class="btn">Say Hi</button>
            <button id="quickHelp" class="btn alt">How to earn</button>
            <button id="quickSEO" class="btn">Make site better</button>
          </div>
        </div>

        <div style="width:360px">
          <div class="small" style="margin-bottom:6px"><strong>Embed / Full LLM</strong></div>
          <input id="embedChatUrl" placeholder="Paste public HuggingFace Space URL (https://...)" style="width:100%;padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);background:transparent;color:#eaf7ff">
          <div style="display:flex;gap:8px;margin-top:8px">
            <button id="doEmbed" class="btn">Embed</button>
            <button id="removeEmbed" class="btn alt">Remove</button>
          </div>
          <div id="embedArea" style="margin-top:10px;height:260px;border-radius:8px;overflow:hidden;background:#000;border:1px solid rgba(255,255,255,0.03);display:flex;align-items:center;justify-content:center;color:var(--muted)">No embed</div>
        </div>
      </div>
      <hr/>
      <div class="small">Local chat uses fast rule-based and creative fallback generation. For full LLM behaviour embed a public HF Space in the box above.</div>
    `;
    // insert after main content start
    contentWrap.insertBefore(chatCard, contentWrap.firstChild.nextSibling);
  }catch(e){console.error(e);}
})();

/* ========== Simple local Chatbot engine ========== */
(function chatEngine(){
  const chatBox = () => document.getElementById('chatBox');
  const input = () => document.getElementById('chatInput');

  function appendMessage(who, text){
    const box = chatBox();
    if(!box) return;
    const el = document.createElement('div');
    el.style.marginBottom='8px';
    el.innerHTML = `<div style="font-size:13px;color:${who==='user'?'#cfe9ff':'#022827'};display:inline-block;max-width:85%;padding:8px;border-radius:8px;background:${who==='user'?'rgba(0,0,0,0.25)':'linear-gradient(90deg,#00d4ff,#4ce6a1)'};color:${who==='user'?'#eaf7ff':'#012827'}">${text.replace(/\n/g,'<br>')}</div>`;
    box.appendChild(el);
    box.scrollTop = box.scrollHeight;
  }

  function generateReply(msg){
    // simple rule-based checks (case-insensitive)
    const t = (msg||'').toLowerCase();
    if(!t.trim()) return "Bata bhai, kuch likh!"; 
    const greetings = ['hi','hello','hey','yo','namaste'];
    for(const g of greetings){ if(t.includes(g)) return `Hey! Main ADDY hoon ‚Äî bata kya karna hai aaj?`;}

    if(t.includes('price') || t.includes('kitne') || t.includes('sell') || t.includes('bech')){
      return "Agar tu site bechna chahta hai to pehle design polish, traffic proof (analytics) aur custom domain add kar. Basic buyers ‚Çπ3k‚Äì10k tak de sakte hain; traffic/monetization ho to ‚Çπ30k+. Main help kar dunga listing text aur pitch.";
    }
    if(t.includes('how') && t.includes('earn') || t.includes('kamai') || t.includes('paise')){
      return "Start free freelancing: gigs bana, Fiverr/Upwork pe listing, ya template-selling (web templates). Tu ADDY tools se social posts bana ke organic traffic le sakta hai ‚Äî main step-by-step plan bana dunga agar chaahe.";
    }
    if(t.includes('bg') || t.includes('background')){
      return "Background remove toggle BodyPix use kar ‚Äî Image Editor ‚Üí Remove BG (Lite). Agar background complex hai to try 'Fit' then 'Remove BG' for better results.";
    }
    if(t.includes('ocr') || t.includes('text')){
      return "OCR button Image Editor me hai ‚Äî use kar aur text ko summarize/translate kar. Agar text poor quality ho to Auto-Enhance pehle chala.";
    }
    if(t.includes('embed') || t.includes('huggingface') || t.includes('space')){
      return "Embed a public HuggingFace Space URL in 'Embed HF Chat' box and click Embed. If the Space allows iframe, it'll load directly.";
    }
    // fallback: creative reply (mix)
    const fallbacks = [
      "Mast idea! Bata aur detail ‚Äî main ek plan bana ke deta hoon.",
      "Yeh feasible hai. Chota proof bana ke dikha: 1) deploy 2) share 3) collect feedback.",
      "Sahi socha ‚Äî main teri madad karunga step-by-step, bata pehla target kya hai (traffic/earn/sell).",
      "Chalo ‚Äî 1 hour me ek landing page bana kar de dunga. Ready?"
    ];
    // small transformation: repeat with enthusiasm
    return fallbacks[Math.floor(Math.random()*fallbacks.length)];
  }

  function send(){
    const txt = input().value.trim();
    if(!txt) return;
    appendMessage('user', txt);
    input().value = '';
    // simulate thinking
    appendMessage('bot', '...thinking');
    setTimeout(()=> {
      // remove last '...thinking'
      const box = chatBox();
      if(box && box.lastChild){ box.removeChild(box.lastChild); }
      const reply = generateReply(txt);
      appendMessage('bot', reply);
    }, 600 + Math.random()*700);
  }

  document.addEventListener('click', function(e){
    if(e.target && e.target.id==='sendChat'){ send(); }
    if(e.target && e.target.id==='quickHello'){ document.getElementById('chatInput').value='Hello'; send(); }
    if(e.target && e.target.id==='quickHelp'){ document.getElementById('chatInput').value='How can I earn online with this site?'; send(); }
    if(e.target && e.target.id==='quickSEO'){ document.getElementById('chatInput').value='How to improve site for buyers?'; send(); }
  });

  // Enter key
  document.addEventListener('keydown', function(e){
    if(e.key==='Enter' && document.activeElement && document.activeElement.id==='chatInput'){ e.preventDefault(); send(); }
  });
})();

/* ========== Embed HF Chat actions ========== */
(function embedActions(){
  const embedBtn = document.getElementById('doEmbed');
  const removeBtn = document.getElementById('removeEmbed');
  embedBtn && embedBtn.addEventListener('click', ()=>{
    const url = document.getElementById('embedChatUrl').value.trim();
    if(!url) return alert('Paste a public https://huggingface.co/spaces/... URL that allows embedding');
    if(!url.startsWith('https://')) return alert('Use https:// URL');
    const frame = document.createElement('iframe');
    frame.src = url;
    frame.style.width='100%'; frame.style.height='100%'; frame.style.border='0';
    const area = document.getElementById('embedArea');
    area.innerHTML=''; area.appendChild(frame);
  });
  removeBtn && removeBtn.addEventListener('click', ()=>{
    const area = document.getElementById('embedArea');
    area.innerHTML = 'No embed';
    document.getElementById('embedChatUrl').value = '';
  });
})();

/* ========== QR Generator & Scanner (creates new UI panel) ========== */
(function qrModule(){
  // create a small card under right side or append to content
  const side = document.querySelector('.side') || document.querySelector('.card') || document.body;
  const card = document.createElement('div');
  card.className='card';
  card.style.marginTop='12px';
  card.innerHTML = `
    <h3 style="margin:0">üîó QR Tools</h3>
    <hr/>
    <div style="display:flex;gap:8px;flex-wrap:wrap">
      <input id="qrText" placeholder="Text / URL to encode" style="flex:1;padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);background:transparent;color:#eaf7ff">
      <button id="makeQR" class="btn">Generate</button>
      <button id="downloadQR" class="btn alt">Download</button>
    </div>
    <div id="qrcode" style="margin-top:8px;display:flex;align-items:center;justify-content:center;min-height:120px"></div>
    <hr/>
    <div><strong>Scan QR (camera)</strong></div>
    <div style="display:flex;gap:8px;margin-top:8px">
      <button id="startScan" class="btn">Start Scan</button>
      <button id="stopScan" class="btn alt">Stop Scan</button>
    </div>
    <div id="scanArea" style="margin-top:8px;min-height:140px;display:flex;align-items:center;justify-content:center;background:rgba(255,255,255,0.02);border-radius:8px">Scanner off</div>
  `;
  side.appendChild(card);

  // QR create
  let qrObj = null;
  document.addEventListener('click', function(e){
    if(e.target && e.target.id==='makeQR'){
      const v = document.getElementById('qrText').value.trim();
      if(!v) return alert('Type text or URL to encode');
      const wrap = document.getElementById('qrcode');
      wrap.innerHTML = '';
      qrObj = new QRCode(wrap, { text: v, width: 180, height: 180 });
    }
    if(e.target && e.target.id==='downloadQR'){
      if(!qrObj){
        return alert('Generate QR first');
      }
      // canvas img exists inside qrcode div or an img
      const wrap = document.getElementById('qrcode');
      const img = wrap.querySelector('img');
      if(img){
        const a = document.createElement('a'); a.href = img.src; a.download='addy_qr.png'; a.click();
      } else {
        // try toDataURL fallback
        const canvas = wrap.querySelector('canvas');
        if(canvas){ const a=document.createElement('a'); a.href = canvas.toDataURL(); a.download='addy_qr.png'; a.click(); }
      }
    }
  });

  /* QR Scanner using getUserMedia + jsQR */
  let scanStream = null, scanReqId = null;
  async function startScanner(){
    const area = document.getElementById('scanArea');
    area.innerHTML = '';
    const video = document.createElement('video'); video.style.width='100%'; video.style.maxHeight='320px';
    area.appendChild(video);
    try{
      scanStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode:'environment' }, audio:false });
      video.srcObject = scanStream; await video.play();
      const canvas = document.createElement('canvas'); const ctx = canvas.getContext('2d');
      async function scanFrame(){
        if(video.readyState !== video.HAVE_ENOUGH_DATA){ scanReqId = requestAnimationFrame(scanFrame); return; }
        canvas.width = video.videoWidth; canvas.height = video.videoHeight;
        ctx.drawImage(video,0,0,canvas.width,canvas.height);
        const imageData = ctx.getImageData(0,0,canvas.width,canvas.height);
        const code = jsQR(imageData.data, imageData.width, imageData.height);
        if(code){
          // show result
          cancelAnimationFrame(scanReqId);
          stopScanner();
          area.innerHTML = `<div style="padding:10px">‚úÖ Scanned: <a href="${escapeHtml(code.data)}" target="_blank">${escapeHtml(code.data)}</a></div>`;
          return;
        } else {
          scanReqId = requestAnimationFrame(scanFrame);
        }
      }
      scanReqId = requestAnimationFrame(scanFrame);
    }catch(err){
      area.innerHTML = `Camera error: ${err.message}`;
    }
  }
  function stopScanner(){
    if(scanReqId) cancelAnimationFrame(scanReqId);
    if(scanStream){
      scanStream.getTracks().forEach(t=>t.stop());
      scanStream=null;
    }
    const area = document.getElementById('scanArea'); area.innerHTML='Scanner off';
  }
  document.getElementById('startScan').addEventListener('click', startScanner);
  document.getElementById('stopScan').addEventListener('click', stopScanner);

  function escapeHtml(s){ return (s+'').replace(/[&<>"']/g, function(m){return {'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m];}); }
})();

/* ========== Quotes Widget ========== */
(function quotesWidget(){
  const side = document.querySelector('.side') || document.querySelector('.card') || document.body;
  const card = document.createElement('div');
  card.className='card';
  card.style.marginTop='12px';
  card.innerHTML = `
    <h3 style="margin:0">üí¨ Quick Quotes</h3><hr/>
    <div id="quoteText" style="min-height:80px;display:flex;align-items:center;justify-content:center;padding:10px;font-weight:600;color:#eaf7ff">Click Get Quote</div>
    <div style="display:flex;gap:8px;margin-top:8px">
      <button id="getQuote" class="btn">Get Quote</button>
      <button id="copyQuote" class="btn alt">Copy</button>
      <button id="shareQuote" class="btn">Share</button>
    </div>
  `;
  side.appendChild(card);

  const quotes = [
    "‡§∞‡•Å‡§ï‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‚Äî ‡§¨‡§∏ ‡§è‡§ï ‡§î‡§∞ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•ã‡•§",
    "‡§õ‡•ã‡§ü‡•Ä ‡§ú‡•Ä‡§§‡•á‡§Ç ‡§≠‡•Ä ‡§¨‡§°‡§º‡•Ä ‡§Æ‡§Ç‡§ú‡§º‡§ø‡§≤‡•ã‡§Ç ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç‡•§",
    "‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ ‡§á‡§Ç‡§∏‡§æ‡§®, ‡§§‡•ã ‡§ï‡§ø‡§∏‡•ç‡§Æ‡§§ ‡§≠‡•Ä ‡§∏‡§æ‡§• ‡§¶‡•á‡§ó‡•Ä‡•§",
    "‡§π‡§∞ ‡§∏‡•Å‡§¨‡§π ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§Æ‡•å‡§ï‡§æ ‡§π‡•à ‚Äî ‡§â‡§†‡•ã ‡§î‡§∞ ‡§ï‡§∞‡•ã‡•§",
    "‡§ó‡§≤‡§§‡§ø‡§Ø‡§æ‡§Å ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡§æ ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§π‡•à‡§Ç ‚Äî ‡§π‡§æ‡§∞ ‡§ï‡§∞ ‡§Æ‡§§ ‡§¨‡•à‡§†‡•ã‡•§",
    "‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä ‡§ß‡•Ä‡§Æ‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§π‡•à ‚Äî ‡§∞‡•Å‡§ï‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§"
  ];

  document.addEventListener('click', function(e){
    if(e.target && e.target.id==='getQuote'){
      const q = quotes[Math.floor(Math.random()*quotes.length)];
      document.getElementById('quoteText').innerText = q;
    }
    if(e.target && e.target.id==='copyQuote'){
      const t = document.getElementById('quoteText').innerText;
      if(t) navigator.clipboard.writeText(t).then(()=> alert('Copied quote'));
    }
    if(e.target && e.target.id==='shareQuote'){
      const t = document.getElementById('quoteText').innerText;
      if(!t) return;
      if(navigator.share){ navigator.share({ text:t }).catch(()=>{}); }
      else { navigator.clipboard.writeText(t).then(()=> alert('No share API ‚Äî copied instead')); }
    }
  });
})();

/* ========== End of Module ========= */
</script>
<!-- END ADDY Part-2 (3/4) --><!-- ADDY: Buyer-Friendly Hero + Features + Pricing CTA (paste into <body>) -->
<section id="sale-hero" style="padding:24px;background:linear-gradient(90deg,#02101a,#052333);color:#e9fbff;border-radius:12px;margin:12px 0;">
  <div style="max-width:1100px;margin:0 auto;display:flex;gap:18px;align-items:center;flex-wrap:wrap;">
    <div style="flex:1;min-width:280px">
      <h1 style="margin:0;font-size:28px;color:#7ef0ff">ADDY ‚Äî Ready-to-sell AI Tools Hub</h1>
      <p style="color:#cfeefb;margin:10px 0;">One-page, deploy-ready AI tools collection ‚Äî Image Editor, BG Remove, OCR, Speech‚ÜíText, Chat, QR, Palette, and more. Perfect for reselling or white-label use.</p>
      <div style="display:flex;gap:10px;flex-wrap:wrap;margin-top:10px">
        <a href="#buyer-pack" style="background:#00d4ff;color:#012827;padding:10px 14px;border-radius:8px;font-weight:700;text-decoration:none;">Buyer Pack (Download)</a>
        <a href="#demo" style="background:transparent;border:1px solid rgba(255,255,255,0.06);color:#eaf7ff;padding:10px 14px;border-radius:8px;text-decoration:none;">Live Demo</a>
      </div>
      <div style="margin-top:12px;color:#bfe9f8;font-size:13px;">
        <strong>Why buy?</strong> Fully client-side, no paid keys, easy GitHub Pages deploy, mobile-friendly, docs & transfer checklist included.
      </div>
    </div>
    <div style="width:360px;min-width:260px">
      <div style="background:#021d26;padding:12px;border-radius:10px;border:1px solid rgba(255,255,255,0.03)">
        <div style="font-size:13px;color:#9fd8ea">What's included</div>
        <ul style="margin:8px 0 0 18px;color:#dff8ff">
          <li>Full single-file index.html (frontend)</li>
          <li>Part-1 (editor/draw/text/voice)</li>
          <li>Part-2 (enhance/bg remove/ocr/palette/qr/quotes)</li>
          <li>Buyer Pack: README, LICENSE, deploy guide</li>
        </ul>
        <div style="margin-top:12px">
          <div style="font-size:12px;color:#cfeefb">Asking price</div>
          <div style="font-weight:800;font-size:20px;margin-top:4px;color:#00ffc8">‚Çπ6,000 ‚Äî ‚Çπ12,000</div>
          <div style="font-size:12px;color:#9fb7d8;margin-top:6px">(negotiable; I will provide transfer instructions)</div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Quick Features Grid -->
<section id="sale-features" style="max-width:1100px;margin:12px auto;padding:12px;display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:12px">
  <div style="background:#08212a;padding:12px;border-radius:8px">
    <h4 style="margin:0;color:#7ef0ff">Image Editor</h4>
    <p class="small" style="color:#bfe9f8">Filters, crop, pseudo-enhance, download ‚Äî mobile friendly.</p>
  </div>
  <div style="background:#08212a;padding:12px;border-radius:8px">
    <h4 style="margin:0;color:#7ef0ff">Background Remove</h4>
    <p class="small" style="color:#bfe9f8">BodyPix client-side remove; works on portraits.</p>
  </div>
  <div style="background:#08212a;padding:12px;border-radius:8px">
    <h4 style="margin:0;color:#7ef0ff">OCR + Speech</h4>
    <p class="small" style="color:#bfe9f8">Tesseract.js OCR + Web Speech API for speech/text.</p>
  </div>
  <div style="background:#08212a;padding:12px;border-radius:8px">
    <h4 style="margin:0;color:#7ef0ff">Chat & Tools</h4>
    <p class="small" style="color:#bfe9f8">Local rule-based chat + HF embed option, QR, palette, quotes.</p>
  </div>
</section>

<!-- Buyer Pack anchor (hidden download link will be added by script) -->
<section id="buyer-pack" style="max-width:1100px;margin:8px auto;padding:12px">
  <h3 style="color:#cfeefb">Buyer Pack (what you get)</h3>
  <ol style="color:#dff8ff">
    <li>Full index.html (ready to deploy on GitHub Pages)</li>
    <li>README.md with deploy & monetization steps</li>
    <li>LICENSE (MIT) and transfer checklist</li>
    <li>One-time 24-hour email support to help deploy (if you request)</li>
  </ol>
  <div style="margin-top:10px">
    <a id="downloadPackBtn" href="#" style="background:#00d4ff;color:#012827;padding:10px 14px;border-radius:8px;font-weight:700;text-decoration:none">Download Buyer Pack (ZIP)</a>
    <a href="mailto:your-email@example.com?subject=Interested%20in%20ADDY%20Buyer%20Pack" style="margin-left:10px;color:#9fb7d8;text-decoration:underline">Email to buy</a>
  </div>
</section>
<!-- END sale UI --><!-- ADDY Premium Intro Animation -->
<style>
  #introLoader {
    position: fixed;
    inset: 0;
    background: radial-gradient(circle at center, #00151f, #000a12);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    animation: fadeOut 1.4s ease-in-out forwards;
    animation-delay: 1.3s;
  }
  #introLoader .logo {
    font-family: 'Poppins', sans-serif;
    font-size: 2.2em;
    letter-spacing: 2px;
    color: #00e6ff;
    text-shadow: 0 0 12px #00ffffaa;
    animation: pulse 1.2s ease-in-out infinite alternate;
  }
  @keyframes pulse {
    from { transform: scale(1); opacity: 0.8; }
    to { transform: scale(1.2); opacity: 1; }
  }
  @keyframes fadeOut {
    to { opacity: 0; visibility: hidden; }
  }
</style>

<div id="introLoader">
  <div class="logo">ADDY.AI</div>
</div>

<script>
  // small delay so animation completes before hide
  setTimeout(()=> document.getElementById('introLoader').style.display='none', 1500);
</script>
<!-- END Premium Intro --><!-- ADDY: Voice Recorder + Light Noise Filter -->
<style>
  #voiceBox{
    background:#081e26;
    border:1px solid rgba(255,255,255,0.05);
    border-radius:12px;
    padding:14px;
    margin:12px 0;
    color:#cfeefb;
  }
  #recStatus{font-size:13px;color:#7ef0ff;margin-top:6px;}
  #audioPlayer{margin-top:10px;width:100%;}
  .btnV{background:#00d4ff;color:#012827;padding:8px 14px;border-radius:8px;border:none;font-weight:600;cursor:pointer;margin:4px;}
</style>

<div id="voiceBox">
  <h3>üé§ Voice Enhance (Lite)</h3>
  <p class="small">Record your voice (up to 30s), auto-filter light background noise and download.</p>
  <div>
    <button id="startRec" class="btnV">Start Recording</button>
    <button id="stopRec" class="btnV">Stop</button>
    <button id="playRec" class="btnV">Play</button>
    <button id="downloadRec" class="btnV">Download</button>
  </div>
  <div id="recStatus">Idle</div>
  <audio id="audioPlayer" controls></audio>
</div>

<script>
let mediaRecorder, audioChunks=[], audioBlob=null, timer=null;

async function startRecording(){
  try{
    const stream = await navigator.mediaDevices.getUserMedia({audio:true});
    mediaRecorder = new MediaRecorder(stream);
    audioChunks=[];
    mediaRecorder.ondataavailable = e=>audioChunks.push(e.data);
    mediaRecorder.onstop = async ()=>{
      audioBlob = new Blob(audioChunks,{type:'audio/wav'});
      // Basic noise filter (high-pass)
      const arrayBuffer = await audioBlob.arrayBuffer();
      const ctx = new AudioContext();
      const buffer = await ctx.decodeAudioData(arrayBuffer);
      const source = ctx.createBufferSource();
      source.buffer = buffer;
      const biquad = ctx.createBiquadFilter();
      biquad.type = "highpass";
      biquad.frequency.value = 180; // remove low hum
      source.connect(biquad).connect(ctx.destination);
      source.start();
      const player = document.getElementById('audioPlayer');
      player.src = URL.createObjectURL(audioBlob);
    };
    mediaRecorder.start();
    document.getElementById('recStatus').innerText="Recording... (max 30s)";
    timer=setTimeout(stopRecording,30000);
  }catch(err){
    alert("Mic access error: "+err.message);
  }
}
function stopRecording(){
  if(mediaRecorder && mediaRecorder.state!=="inactive"){
    mediaRecorder.stop();
    document.getElementById('recStatus').innerText="Processing...";
    clearTimeout(timer);
  }
}
function playRecording(){
  const player=document.getElementById('audioPlayer');
  if(player.src){player.play();}
}
function downloadRecording(){
  if(!audioBlob)return alert("No recording yet");
  const a=document.createElement('a');
  a.href=URL.createObjectURL(audioBlob);
  a.download='enhanced_voice.wav';
  a.click();
}
document.getElementById('startRec').onclick=startRecording;
document.getElementById('stopRec').onclick=stopRecording;
document.getElementById('playRec').onclick=playRecording;
document.getElementById('downloadRec').onclick=downloadRecording;
</script>
<!-- END Voice Recorder --><!-- ADDY: Enhanced Voice Recorder + Noise-Reduce (client-side) -->
<style>
  /* Voice UI */
  .addy-voice {
    background:#071822;border:1px solid rgba(255,255,255,0.03);
    padding:14px;border-radius:12px;color:#dff8ff;margin:12px 0;
    box-shadow:0 8px 30px rgba(0,0,0,0.6);
  }
  .addy-voice .row{display:flex;gap:8px;flex-wrap:wrap;align-items:center}
  .mic-btn{width:54px;height:54px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-weight:700;
    border:0;cursor:pointer;box-shadow:0 6px 18px rgba(0,0,0,0.5)}
  .mic-start{background:linear-gradient(135deg,#00e6ff,#00ffa3);color:#012827}
  .mic-stop{background:#ff6b6b;color:#1a0b0b}
  .control-btn{background:rgba(255,255,255,0.05);border:1px solid rgba(255,255,255,0.02);padding:8px 12px;border-radius:8px;color:#e9fbff}
  .status{font-size:13px;color:#9fd8ea;margin-top:8px}
  .wave-canvas{width:100%;height:80px;border-radius:8px;background:linear-gradient(180deg,rgba(255,255,255,0.01),rgba(255,255,255,0.02));margin-top:10px}
  .glow {filter:drop-shadow(0 0 12px rgba(0,230,255,0.12));}
  .tiny{font-size:12px;color:#9fb7d8}
</style>

<div class="addy-voice" id="addyVoiceEnhanced">
  <div style="display:flex;justify-content:space-between;align-items:center">
    <div>
      <h3 style="margin:0">üé§ Voice Enhance ‚Äî ADDY (Lite)</h3>
      <div class="tiny">Record up to 30s ‚Üí client-side enhance ‚Üí preview & download (WAV)</div>
    </div>
    <div style="text-align:right">
      <div id="micGlow" style="width:44px;height:44px;border-radius:8px;background:linear-gradient(90deg,#001a22,#003243);display:flex;align-items:center;justify-content:center" class="glow">
        <svg id="micIcon" width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M12 14a3 3 0 0 0 3-3V6a3 3 0 0 0-6 0v5a3 3 0 0 0 3 3z" stroke="#7ef0ff" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/><path d="M19 11a7 7 0 0 1-14 0" stroke="#7ef0ff" stroke-width="1.4" stroke-linecap="round"/></svg>
      </div>
    </div>
  </div>

  <div class="row" style="margin-top:12px">
    <button id="addyStart" class="mic-btn mic-start">REC</button>
    <button id="addyStop" class="mic-btn mic-stop" disabled>STOP</button>
    <button id="addyPlay" class="control-btn" disabled>Play</button>
    <button id="addyDownload" class="control-btn" disabled>Download WAV</button>
    <div style="flex:1"></div>
    <div class="tiny">Limit: <strong>30s</strong></div>
  </div>

  <div class="status" id="addyStatus">Idle ‚Äî press REC</div>
  <canvas id="addyWave" class="wave-canvas"></canvas>

  <audio id="addyPlayer" controls style="width:100%;margin-top:10px"></audio>
</div>

<script>
/* ADDY Enhanced Voice Recorder + Simple Noise-Reduce using WebAudio + OfflineAudioContext
   - Records via MediaRecorder (webm/ogg or default)
   - Renders through OfflineAudioContext: highpass -> lowpass -> dynamic compression -> normalization
   - Produces WAV Blob for download
   - Shows live waveform while recording and static waveform after processing
*/

(() => {
  const startBtn = document.getElementById('addyStart');
  const stopBtn = document.getElementById('addyStop');
  const playBtn = document.getElementById('addyPlay');
  const dlBtn = document.getElementById('addyDownload');
  const statusEl = document.getElementById('addyStatus');
  const player = document.getElementById('addyPlayer');
  const waveCanvas = document.getElementById('addyWave');
  const canvasCtx = waveCanvas.getContext('2d');
  const micGlow = document.getElementById('micGlow');

  let mediaRecorder, chunks = [], stream = null, analyser=null, audioContext=null;
  let rafId=null, recordedBlob=null, processedBlob=null;
  let maxDuration = 30000; // 30s
  let recTimer = null;

  function setStatus(t){ statusEl.innerText = t; }

  function drawLiveWave() {
    if(!analyser) return;
    const bufferLength = analyser.fftSize;
    const dataArray = new Uint8Array(bufferLength);
    analyser.getByteTimeDomainData(dataArray);
    const w = waveCanvas.width = waveCanvas.clientWidth * devicePixelRatio;
    const h = waveCanvas.height = waveCanvas.clientHeight * devicePixelRatio;
    canvasCtx.clearRect(0,0,w,h);
    canvasCtx.fillStyle = 'rgba(0,0,0,0)';
    canvasCtx.fillRect(0,0,w,h);
    canvasCtx.lineWidth = 2 * devicePixelRatio;
    canvasCtx.strokeStyle = '#00f0ff';
    canvasCtx.beginPath();
    const sliceWidth = w / bufferLength;
    let x = 0;
    for(let i=0;i<bufferLength;i++){
      const v = dataArray[i] / 128.0;
      const y = (v * h / 2);
      if(i===0) canvasCtx.moveTo(x,y);
      else canvasCtx.lineTo(x,y);
      x += sliceWidth;
    }
    canvasCtx.lineTo(w, h/2);
    canvasCtx.stroke();
    rafId = requestAnimationFrame(drawLiveWave);
  }

  startBtn.addEventListener('click', async () => {
    try{
      setStatus('Requesting mic...');
      stream = await navigator.mediaDevices.getUserMedia({ audio: { sampleRate: 48000 } });
      audioContext = new AudioContext();
      const source = audioContext.createMediaStreamSource(stream);
      analyser = audioContext.createAnalyser();
      analyser.fftSize = 2048;
      source.connect(analyser);
      drawLiveWave();

      // start MediaRecorder
      chunks = [];
      const options = { mimeType: 'audio/webm' };
      mediaRecorder = new MediaRecorder(stream, options);
      mediaRecorder.ondataavailable = e => { if(e.data && e.data.size>0) chunks.push(e.data); };
      mediaRecorder.onstart = () => {
        setStatus('Recording...');
        startBtn.disabled=true; stopBtn.disabled=false; playBtn.disabled=true; dlBtn.disabled=true;
        micGlow.style.boxShadow = '0 0 20px rgba(0,230,255,0.28), inset 0 0 12px rgba(0,230,255,0.06)';
      };
      mediaRecorder.onstop = async () => {
        setStatus('Recording stopped. Processing...');
        cancelAnimationFrame(rafId);
        // create raw blob
        recordedBlob = new Blob(chunks, { type: 'audio/webm' });
        // process using OfflineAudioContext
        processedBlob = await enhanceAndRender(recordedBlob);
        // set player src
        player.src = URL.createObjectURL(processedBlob);
        playBtn.disabled=false; dlBtn.disabled=false; startBtn.disabled=false; stopBtn.disabled=true;
        setStatus('Ready ‚Äî Play or Download');
        micGlow.style.boxShadow = '';
      };

      mediaRecorder.start();
      // auto-stop after maxDuration
      recTimer = setTimeout(()=> { if(mediaRecorder && mediaRecorder.state==='recording') mediaRecorder.stop(); }, maxDuration);
    }catch(err){
      console.error(err);
      alert('Microphone access denied or error: ' + err.message);
      setStatus('Error: mic access');
    }
  });

  stopBtn.addEventListener('click', ()=>{
    if(mediaRecorder && mediaRecorder.state==='recording') mediaRecorder.stop();
    if(recTimer) clearTimeout(recTimer);
  });

  playBtn.addEventListener('click', ()=> {
    if(player.src) player.play();
  });

  dlBtn.addEventListener('click', ()=> {
    if(!processedBlob) return alert('No audio processed yet');
    const a = document.createElement('a'); a.href = URL.createObjectURL(processedBlob); a.download = 'addy_enhanced.wav'; a.click();
  });

  /* ---------- Enhance pipeline using OfflineAudioContext ---------- */
  async function enhanceAndRender(blob){
    // decode to AudioBuffer using a temporary AudioContext
    const arrayBuffer = await blob.arrayBuffer();
    const decodeCtx = new (window.AudioContext || window.webkitAudioContext)();
    const decoded = await decodeCtx.decodeAudioData(arrayBuffer);

    // create offline context same length
    const sampleRate = 44100;
    const offlineCtx = new OfflineAudioContext(decoded.numberOfChannels, decoded.length, sampleRate);

    // source
    const src = offlineCtx.createBufferSource();
    // resample if needed
    if(decoded.sampleRate !== sampleRate){
      // simple resample: create new buffer and copy (approx)
      const newBuf = offlineCtx.createBuffer(decoded.numberOfChannels, Math.floor(decoded.length * sampleRate / decoded.sampleRate), sampleRate);
      for(let ch=0; ch<decoded.numberOfChannels; ch++){
        const inData = decoded.getChannelData(ch);
        const outData = newBuf.getChannelData(ch);
        // linear resample
        for(let i=0;i<outData.length;i++){
          const t = i * (decoded.length-1) / (outData.length-1);
          const i1 = Math.floor(t);
          const i2 = Math.min(i1+1, inData.length-1);
          const frac = t - i1;
          outData[i] = inData[i1] * (1-frac) + inData[i2] * frac;
        }
      }
      src.buffer = newBuf;
    } else {
      src.buffer = decoded;
    }

    // highpass to remove low hum
    const hp = offlineCtx.createBiquadFilter();
    hp.type = 'highpass';
    hp.frequency.value = 180;

    // lowpass to cut extreme hiss
    const lp = offlineCtx.createBiquadFilter();
    lp.type = 'lowpass';
    lp.frequency.value = 9000;

    // gentle peaking EQ to add presence
    const peq = offlineCtx.createBiquadFilter();
    peq.type = 'peaking';
    peq.frequency.value = 2500;
    peq.gain.value = 3;
    peq.Q.value = 1;

    // dynamics compressor to control levels (acts slightly as noise gate)
    const comp = offlineCtx.createDynamicsCompressor();
    comp.threshold.value = -40;
    comp.knee.value = 20;
    comp.ratio.value = 6;
    comp.attack.value = 0.003;
    comp.release.value = 0.25;

    // gain normalization
    const gain = offlineCtx.createGain();
    gain.gain.value = 1.5;

    // connect chain: src -> hp -> lp -> peq -> comp -> gain -> destination
    src.connect(hp);
    hp.connect(lp);
    lp.connect(peq);
    peq.connect(comp);
    comp.connect(gain);
    gain.connect(offlineCtx.destination);

    src.start(0);
    // render
    const rendered = await offlineCtx.startRendering();

    // normalize loudness (simple peak normalize)
    for(let ch=0; ch<rendered.numberOfChannels; ch++){
      const data = rendered.getChannelData(ch);
      let peak = 0;
      for(let i=0;i<data.length;i++) peak = Math.max(peak, Math.abs(data[i]));
      if(peak > 0){
        const norm = 0.95 / peak;
        for(let i=0;i<data.length;i++) data[i] *= norm;
      }
    }

    // convert AudioBuffer to WAV Blob
    const wav = audioBufferToWav(rendered);
    return new Blob([wav], { type: 'audio/wav' });
  }

  /* ---------- helper: AudioBuffer -> WAV (Float32 -> 16bit PCM) ---------- */
  function audioBufferToWav(buffer){
    const numChannels = buffer.numberOfChannels;
    const sampleRate = buffer.sampleRate;
    const format = 1; // PCM
    const bitDepth = 16;
    const length = buffer.length * numChannels * (bitDepth/8);
    const bufferArray = new ArrayBuffer(44 + length);
    const view = new DataView(bufferArray);
    /* RIFF identifier */
    writeString(view, 0, 'RIFF');
    view.setUint32(4, 36 + length, true);
    writeString(view, 8, 'WAVE');
    /* fmt chunk */
    writeString(view, 12, 'fmt ');
    view.setUint32(16, 16, true);
    view.setUint16(20, format, true);
    view.setUint16(22, numChannels, true);
    view.setUint32(24, sampleRate, true);
    view.setUint32(28, sampleRate * numChannels * (bitDepth/8), true);
    view.setUint16(32, numChannels * (bitDepth/8), true);
    view.setUint16(34, bitDepth, true);
    /* data chunk */
    writeString(view, 36, 'data');
    view.setUint32(40, length, true);

    // write interleaved PCM samples
    let offset = 44;
    const channelData = [];
    for(let ch=0; ch<numChannels; ch++) channelData.push(buffer.getChannelData(ch));
    const sampleCount = buffer.length;
    for(let i=0;i<sampleCount;i++){
      for(let ch=0; ch<numChannels; ch++){
        let sample = Math.max(-1, Math.min(1, channelData[ch][i]));
        view.setInt16(offset, sample < 0 ? sample * 0x8000 : sample * 0x7FFF, true);
        offset += 2;
      }
    }
    return view;
  }
  function writeString(view, offset, string){
    for(let i=0;i<string.length;i++){
      view.setUint8(offset + i, string.charCodeAt(i));
    }
  }

  // resize canvas for hi-DPI
  function resizeCanvas(){
    waveCanvas.width = waveCanvas.clientWidth * devicePixelRatio;
    waveCanvas.height = waveCanvas.clientHeight * devicePixelRatio;
  }
  window.addEventListener('resize', resizeCanvas);
  resizeCanvas();

})();
</script>
<!-- END ADDY Voice Enhance --><!-- ADDY Final Polish Booster Pack -->
<!-- ‚úÖ Meta & SEO polish -->
<meta name="title" content="ADDY.AI ‚Äî Smart Free AI Tools Hub">
<meta name="description" content="Use free AI-powered tools for voice enhancement, image effects, text summary and more. 100% browser-based and secure.">
<meta property="og:title" content="ADDY.AI ‚Äî Free Smart Tools">
<meta property="og:description" content="Premium free AI tools ‚Äî built for everyone. Try now.">
<meta name="theme-color" content="#00e6ff">

<style>
  html{scroll-behavior:smooth;}
  [data-animate]{opacity:0;transform:translateY(30px);transition:all 0.8s ease;}
  [data-animate].visible{opacity:1;transform:translateY(0);}
  .glow-hover:hover{box-shadow:0 0 15px #00f6ff66, inset 0 0 10px #00f6ff33;transform:scale(1.03);}
  #visitorBox{color:#9fe7ff;font-size:13px;text-align:right;margin:10px 0;}
  #contactBox{background:rgba(255,255,255,0.02);border:1px solid rgba(255,255,255,0.05);border-radius:10px;padding:10px;margin-top:20px;}
  #contactBox a{color:#00e6ff;text-decoration:none;font-weight:500;}
  footer{margin-top:20px;text-align:center;font-size:13px;color:#8dcde8;}
</style>

<!-- ‚úÖ Visitor Counter -->
<div id="visitorBox">üëÅ Visitors loading...</div>

<!-- ‚úÖ Contact / About section -->
<div id="contactBox" data-animate>
  <h3>üì© Contact</h3>
  <p>Want to collaborate or buy this project?<br>
  <strong>Email:</strong> <a href="mailto:addy.ai.contact@gmail.com">addy.ai.contact@gmail.com</a></p>
  <p style="font-size:12px;color:#7ca9bd">Your messages are welcome ‚Äî suggestions, feedback, or purchase interest.</p>
</div>

<footer data-animate>¬© 2025 <strong>ADDY.AI</strong> ‚Äî Smart Free AI Tools Hub</footer>

<script>
/* Fade-in on scroll animation */
const observer = new IntersectionObserver(entries=>{
  entries.forEach(entry=>{
    if(entry.isIntersecting){entry.target.classList.add('visible');}
  });
});
document.querySelectorAll('[data-animate]').forEach(el=>observer.observe(el));

/* Live Visitor Counter (localStorage based mock) */
(function(){
  const box=document.getElementById('visitorBox');
  let count=localStorage.getItem('addy_visitors');
  if(!count){count=Math.floor(Math.random()*50)+10;}
  else{count=parseInt(count)+1;}
  localStorage.setItem('addy_visitors',count);
  box.innerText="üëÅ Total Visitors: "+count;
})();

/* Neon hover effect for all buttons */
document.querySelectorAll('button').forEach(btn=>{
  btn.classList.add('glow-hover');
});
</script>
<!-- END Polish Booster Pack --><!-- ADDY Final Booster Pack -->
<!-- ‚úÖ PWA installable setup -->
<link rel="manifest" href="manifest.json">
<meta name="theme-color" content="#00e6ff">
<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('service-worker.js')
      .then(()=>console.log('Service Worker registered'))
      .catch(err=>console.log('SW fail',err));
    });
  }
</script>

<!-- ‚úÖ Smooth Fade Animations -->
<style>
  html{scroll-behavior:smooth;}
  [data-fade]{opacity:0;transform:translateY(30px);transition:all .8s ease;}
  [data-fade].show{opacity:1;transform:translateY(0);}
  .neon-btn:hover{box-shadow:0 0 15px #00f0ff88, inset 0 0 10px #00f0ff33;transform:scale(1.04);}
  #visCounter{color:#8ff0ff;text-align:right;font-size:13px;margin-top:10px;}
  #adSpace{margin:20px auto;padding:20px;border:1px dashed rgba(255,255,255,0.2);
           border-radius:12px;text-align:center;color:#7ecae0;background:rgba(255,255,255,0.02);}
</style>

<!-- ‚úÖ Visitor counter -->
<div id="visCounter">Visitors: loading...</div>

<!-- ‚úÖ Ad-ready section -->
<div id="adSpace" data-fade>
  <h3>üåü Sponsored Section</h3>
  <p>Your Ad / Partner content will appear here.</p>
</div>

<!-- ‚úÖ Contact section -->
<div id="contactBox" data-fade>
  <h3>üì© Contact</h3>
  <p>Email: <a href="mailto:addy.ai.contact@gmail.com" style="color:#00e6ff;text-decoration:none;">addy.ai.contact@gmail.com</a></p>
</div>

<footer data-fade style="margin-top:20px;text-align:center;font-size:13px;color:#9fd8f0;">
  ¬© 2025 <strong>ADDY.AI</strong> ‚Äî Smart Free AI Tools Hub
</footer>

<script>
/* Fade on scroll */
const obs=new IntersectionObserver(es=>{es.forEach(e=>{if(e.isIntersecting)e.target.classList.add('show')})});
document.querySelectorAll('[data-fade]').forEach(el=>obs.observe(el));

/* Visitor counter (local mock + analytics ping) */
(function(){
  let c=localStorage.getItem('addy_visit');
  if(!c){c=Math.floor(Math.random()*80)+20;}
  else{c=parseInt(c)+1;}
  localStorage.setItem('addy_visit',c);
  document.getElementById('visCounter').innerText="üëÅ Visitors: "+c;
})();

/* Simple analytics ping (optional Cloudflare/Google tag ready) */
(function(){
  const img=new Image();
  img.src="https://example-analytics-ping.vercel.app/ping?ref=addy-ai&t="+Date.now();
})();

/* Neon hover for buttons */
document.querySelectorAll('button').forEach(b=>b.classList.add('neon-btn'));
</script>
<!-- END ADDY Booster --><!-- üß† ADDY.AI Master Polish Pack -->

<!-- ‚úÖ SEO & Social Metadata -->
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="title" content="ADDY.AI ‚Äî Smart Free AI Tools">
<meta name="description" content="Experience free AI tools that look and feel premium ‚Äî voice enhancer, text summarizer, image effects and more. 100% browser-based.">
<meta name="keywords" content="AI tools, voice enhancer, image tools, free ai, addy ai, ai webapp, smart ai hub">
<meta name="author" content="ADDY.AI">
<meta property="og:title" content="ADDY.AI ‚Äî Smart Free AI Tools Hub">
<meta property="og:description" content="Premium-looking free AI toolkit for creators and developers.">
<meta property="og:image" content="icon-512.png">
<meta property="og:type" content="website">
<meta name="theme-color" content="#00e6ff">
<link rel="icon" href="icon-192.png" type="image/png">

<!-- ‚úÖ Google Search + Index Ready -->
<meta name="robots" content="index, follow">
<link rel="canonical" href="https://gulladj61-sketch.github.io/ADDY-budyy/">

<!-- ‚úÖ Animated Logo (Neon Glow) -->
<style>
  @keyframes logoPulse {
    0% { text-shadow:0 0 10px #00e6ff88; transform:scale(1);}
    50% { text-shadow:0 0 20px #00e6ffaa; transform:scale(1.05);}
    100% { text-shadow:0 0 10px #00e6ff88; transform:scale(1);}
  }
  #addyLogo {
    font-family:'Poppins',sans-serif;
    color:#00e6ff;
    letter-spacing:2px;
    font-weight:700;
    font-size:1.8em;
    animation:logoPulse 2s ease-in-out infinite;
    user-select:none;
  }
  #logoBar {
    display:flex;align-items:center;gap:8px;
    background:rgba(255,255,255,0.02);
    border-bottom:1px solid rgba(255,255,255,0.05);
    padding:10px 16px;
    box-shadow:0 4px 20px rgba(0,0,0,0.4);
  }
  #logoBar img {width:26px;height:26px;border-radius:6px;filter:drop-shadow(0 0 8px #00e6ff55);}
</style>

<div id="logoBar">
  <img src="icon-192.png" alt="ADDY Icon">
  <div id="addyLogo">ADDY.AI</div>
</div>
<!-- üß† END Master Polish Pack --><!-- üß≠ ADDY.AI DEMO PRESENTATION SECTION -->
<style>
  #demoShowcase {
    background: linear-gradient(135deg,#00151f,#00222e);
    border-radius: 12px;
    padding: 24px;
    margin: 40px 0;
    box-shadow: 0 6px 30px rgba(0,0,0,0.4);
    color: #dff9ff;
  }
  #demoShowcase h2 {
    font-size: 1.8em;
    color: #00e6ff;
    text-align: center;
    margin-bottom: 10px;
  }
  .demoCard {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    background: rgba(255,255,255,0.03);
    border: 1px solid rgba(255,255,255,0.06);
    border-radius: 10px;
    padding: 16px;
    margin: 10px 0;
    transition: transform .4s ease, box-shadow .4s ease;
  }
  .demoCard:hover {
    transform: scale(1.03);
    box-shadow: 0 0 20px rgba(0,230,255,0.2);
  }
  .demoCard img {
    width: 90%;
    border-radius: 8px;
    margin-bottom: 10px;
  }
  .demoCard h3 {
    color: #00e6ff;
    margin-bottom: 5px;
  }
  .demoCard p {
    font-size: 0.9em;
    color: #b7d8e6;
  }
</style>

<section id="demoShowcase">
  <h2>üöÄ ADDY.AI Showcase</h2>
  <p style="text-align:center;font-size:14px;color:#a8d8e6;">A complete browser-based AI toolkit for creators, developers & learners.</p>

  <div class="demoCard">
    <img src="https://via.placeholder.com/600x300/001c28/00e6ff?text=Voice+Enhancer+Demo" alt="Voice Enhancer Demo">
    <h3>üé§ Voice Enhancer</h3>
    <p>Record, auto-filter & enhance your voice directly in the browser ‚Äî fast, free and clean output.</p>
  </div>

  <div class="demoCard">
    <img src="https://via.placeholder.com/600x300/001c28/00e6ff?text=Image+Tool+Demo" alt="Image Tools Demo">
    <h3>üñº Image Tools</h3>
    <p>Generate color palettes, filters and effects in one tap ‚Äî all client-side, no API keys required.</p>
  </div>

  <div class="demoCard">
    <img src="https://via.placeholder.com/600x300/001c28/00e6ff?text=Text+Summarizer+Demo" alt="Text Summarizer Demo">
    <h3>üß† AI Text Summarizer</h3>
    <p>Simplify long paragraphs into key points ‚Äî fully offline NLP logic built-in.</p>
  </div>
</section>
<!-- üß≠ END PRESENTATION SECTION --><!-- üîπ REMOVE PRICE SECTION (‚Çπ6000‚Äì‚Çπ12000 wala) -->
<script>
document.addEventListener("DOMContentLoaded", () => {
  const removeTexts = ["‚Çπ6,000", "‚Çπ12,000", "Asking price"];
  removeTexts.forEach(text => {
    document.querySelectorAll("body *").forEach(el => {
      if (el.innerText && el.innerText.includes(text)) {
        el.style.display = "none";
      }
    });
  });
});
</script><!-- üåü ADDY.AI Universal Animation & Glow Pack -->
<style>
/* Universal Fade & Zoom */
.animate-fade {
  opacity: 0;
  transform: translateY(30px);
  transition: all 1s ease;
}
.animate-fade.visible {
  opacity: 1;
  transform: translateY(0);
}

.animate-zoom {
  opacity: 0;
  transform: scale(0.85);
  transition: all 0.8s ease;
}
.animate-zoom.visible {
  opacity: 1;
  transform: scale(1);
}

/* Hover Glow (for cards or buttons) */
.glow-hover {
  transition: 0.3s;
  box-shadow: 0 0 0px transparent;
}
.glow-hover:hover {
  box-shadow: 0 0 20px #00e5ff88;
  transform: translateY(-5px);
}

/* Neon Text */
.neon-text {
  color: #00e5ff;
  text-shadow: 0 0 5px #00e5ffaa, 0 0 15px #00e5ffaa;
}

/* Pulse Effect */
.pulse {
  animation: pulse 2s infinite;
}
@keyframes pulse {
  0% {transform: scale(1);}
  50% {transform: scale(1.05);}
  100% {transform: scale(1);}
}
</style>

<!-- ‚ú® Example Usage -->
<div style="text-align:center;margin:40px 0;">
  <h2 class="neon-text animate-fade">‚ö° Smart AI Tools Section ‚ö°</h2>

  <div class="animate-zoom glow-hover" style="background:#111;padding:20px;margin:20px auto;width:80%;border-radius:10px;">
    <h3>üñºÔ∏è Image Enhancer</h3>
    <p>Improve quality up to 8K instantly.</p>
    <button class="glow-hover pulse" style="background:#00e5ff;color:#fff;border:none;padding:10px 20px;border-radius:8px;">Try Now</button>
  </div>

  <div class="animate-zoom glow-hover" style="background:#111;padding:20px;margin:20px auto;width:80%;border-radius:10px;">
    <h3>üé§ Voice Cleaner</h3>
    <p>Removes noise within 30 seconds.</p>
    <button class="glow-hover" style="background:#00e5ff;color:#fff;border:none;padding:10px 20px;border-radius:8px;">Enhance Voice</button>
  </div>
</div>

<!-- üåà Scroll Animation Script -->
<script>
window.addEventListener('scroll',()=>{
  document.querySelectorAll('.animate-fade, .animate-zoom').forEach(el=>{
    const rect=el.getBoundingClientRect();
    if(rect.top<window.innerHeight-100) el.classList.add('visible');
  });
});
</script>
<!-- üåü END UNIVERSAL ANIMATION PACK --><!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>ADDY.AI ‚Äî Premium Tools Hub</title>
<meta name="description" content="ADDY.AI ‚Äî premium-looking, free browser AI tools: image enhancer, background blur, OCR, voice enhance and more. 100% client-side." />
<meta name="theme-color" content="#001b27" />
<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><circle cx='50' cy='50' r='45' fill='%2300e6ff'/></svg>">

<!-- Minimal reset + premium styling -->
<style>
:root{
  --bg1:#05121a; --bg2:#071b28; --accent:#00e6ff; --card:#071e24; --muted:#9fd8ea;
  --glass: rgba(255,255,255,0.03);
  --glass-strong: rgba(255,255,255,0.06);
}
html,body{height:100%;margin:0;background:linear-gradient(120deg,var(--bg1),var(--bg2));font-family:Inter,system-ui,Segoe UI,Roboto,'Poppins',sans-serif;color:#e9fbff;-webkit-font-smoothing:antialiased;}
.container{max-width:1100px;margin:0 auto;padding:24px;}
/* Intro loader - premium */
#introLoader{
  position:fixed;inset:0;display:flex;align-items:center;justify-content:center;
  background: radial-gradient(circle at 30% 30%, rgba(0,230,255,0.06), rgba(0,0,0,0.8)), linear-gradient(180deg,#000814,#000000);
  z-index:99999;
}
.logo-wrap{display:flex;flex-direction:column;align-items:center;gap:14px}
.logo-glow{
  font-size:40px;font-weight:800;letter-spacing:3px;color:var(--accent);
  text-shadow:0 0 18px #00e6ff88,0 0 30px #00e6ff44,0 6px 40px rgba(0,20,30,0.6);
  transform-origin:center;
  animation:logoPop 1.6s cubic-bezier(.2,.9,.2,1);
}
@keyframes logoPop{0%{transform:scale(.6);opacity:0}50%{transform:scale(1.05);opacity:1}100%{transform:scale(1);opacity:1}}
.loader-sub{color:var(--muted);font-size:14px;opacity:.9}
.intro-seq{display:flex;gap:10px;margin-top:12px}
.dot{width:10px;height:10px;border-radius:50%;background:var(--accent);opacity:.9;transform:scale(.6);animation:dotPulse 1.2s infinite;}
.dot:nth-child(2){animation-delay:.15s}.dot:nth-child(3){animation-delay:.3s}
@keyframes dotPulse{0%{transform:scale(.6);opacity:.4}50%{transform:scale(1);opacity:1}100%{transform:scale(.6);opacity:.4}}

/* Header / brand bar */
#logoBar{display:flex;align-items:center;gap:12px;padding:14px 0;}
#logoBar img{width:44px;height:44px;border-radius:10px;filter:drop-shadow(0 8px 30px rgba(0,230,255,0.06))}
#addyLogo{font-weight:800;color:var(--accent);font-size:20px;text-shadow:0 0 8px rgba(0,230,255,0.14)}

/* Hero */
.hero{display:flex;gap:20px;align-items:center;justify-content:space-between;padding:20px;background:linear-gradient(180deg, rgba(255,255,255,0.015), transparent);border-radius:14px;border:1px solid var(--glass-strong);box-shadow:0 8px 40px rgba(0,0,0,0.6);margin-bottom:18px}
.hero-left{flex:1}
.hero-right{width:380px;min-width:260px}
.h1{font-size:34px;margin:0}
.lead{color:var(--muted);margin-top:8px;font-size:15px}

/* tools grid */
.tools-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px;margin-top:18px}
.card{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.015));border:1px solid var(--glass);padding:14px;border-radius:12px;min-height:140px;display:flex;flex-direction:column;gap:10px;position:relative;overflow:hidden}
.card h3{margin:0;color:var(--accent)}
.small{font-size:13px;color:var(--muted)}
.btn{background:var(--accent);color:#012827;padding:8px 12px;border-radius:8px;border:0;font-weight:700;cursor:pointer}
.btn.alt{background:transparent;border:1px solid var(--glass-strong;color:var(--muted))}
/* neon hover */
.card:hover{box-shadow:0 12px 40px rgba(0,230,255,0.06);transform:translateY(-6px);transition:all .25s ease}

/* long page spacing */
.section{margin-top:30px;padding:18px 0}

/* image editor layout */
.editor{display:flex;gap:12px;flex-wrap:wrap}
.editor-left{flex:1;min-width:280px}
.editor-right{width:320px;min-width:260px}
#editorCanvas{width:100%;border-radius:8px;background:#000;display:block}

/* controls */
.controls{display:flex;gap:8px;flex-wrap:wrap;margin-top:10px}
.input-file{display:block;padding:10px;border-radius:8px;background:rgba(255,255,255,0.02);border:1px solid var(--glass);color:var(--muted)}

/* voice box */
.voice-box{background:linear-gradient(180deg, rgba(255,255,255,0.01), transparent);padding:12px;border-radius:10px;border:1px solid var(--glass)}

/* footer */
footer{margin-top:40px;text-align:center;color:var(--muted);font-size:13px;padding-bottom:40px}

/* responsive */
@media(max-width:800px){.hero{flex-direction:column}.hero-right{width:100%}}
</style>

</head>
<body>

<!-- INTRO LOADER -->
<div id="introLoader" aria-hidden="false">
  <div class="logo-wrap">
    <div class="logo-glow">ADDY.AI</div>
    <div class="loader-sub">Premium Tools ‚Ä¢ Fully client-side ‚Ä¢ No paid keys</div>
    <div class="intro-seq">
      <div class="dot"></div><div class="dot"></div><div class="dot"></div>
    </div>
  </div>
</div>

<div class="container" id="mainApp" style="opacity:0;transition:opacity .6s ease 1.6s">
  <!-- header -->
  <div id="logoBar">
    <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Ccircle cx='12' cy='12' r='10' fill='%2300e6ff'/%3E%3C/svg%3E" alt="ADDY icon">
    <div id="addyLogo">ADDY.AI</div>
    <div style="flex:1"></div>
    <div class="small">PWA ‚Ä¢ Offline friendly ‚Ä¢ Free tools</div>
  </div>

  <!-- hero -->
  <div class="hero">
    <div class="hero-left">
      <div class="h1">Professional AI Tools ‚Äî Free & Browser-based</div>
      <div class="lead">Image Enhancer (8K-style), Background Blur, OCR, Voice Enhance & more ‚Äî all in your browser. Perfect for demo, resale, or personal use.</div>

      <div style="margin-top:16px;display:flex;gap:10px;flex-wrap:wrap">
        <button class="btn" onclick="scrollToSection('editorSec')">Open Image Editor</button>
        <button class="btn" onclick="scrollToSection('voiceSec')">Voice Enhance</button>
        <a class="btn" href="#demoShowcase">Demo Showcase</a>
      </div>
    </div>

    <div class="hero-right">
      <div style="background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);padding:12px;border-radius:12px;border:1px solid var(--glass);">
        <div style="display:flex;align-items:center;gap:10px">
          <div style="width:44px;height:44px;border-radius:10px;background:#001a22;display:flex;align-items:center;justify-content:center;color:var(--accent);font-weight:800">AI</div>
          <div>
            <div style="font-weight:700">Ready For Buyers</div>
            <div class="small">One-file deploy ‚Ä¢ GitHub Pages</div>
          </div>
        </div>
        <div style="margin-top:12px">
          <div class="small">Features</div>
          <ul style="margin:6px 0 0 18px;color:var(--muted)">
            <li>Background Blur (person-aware)</li>
            <li>Pseudo 8K Ultra Enhance</li>
            <li>OCR, Palette</li>
            <li>Voice Recorder + Enhance</li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- TOOLS -->
  <div class="section" id="tools">
    <h2 style="margin:6px 0 0 0;color:var(--accent)">Tools</h2>
    <div class="tools-grid">
      <div class="card">
        <h3>üñº Image Editor</h3>
        <div class="small">Upload image, apply background blur, ultra-enhance (8K-style) and download.</div>
        <div style="margin-top:auto;">
          <button class="btn" onclick="scrollToSection('editorSec')">Open Editor</button>
        </div>
      </div>
      <div class="card">
        <h3>üé§ Voice Enhance</h3>
        <div class="small">Record 30s, client-side enhancement & download WAV.</div>
        <div style="margin-top:auto">
          <button class="btn" onclick="scrollToSection('voiceSec')">Try Voice</button>
        </div>
      </div>
      <div class="card">
        <h3>üîç OCR (Text Reader)</h3>
        <div class="small">Read text from images using Tesseract.js (client-side).</div>
        <div style="margin-top:auto">
          <button class="btn" onclick="scrollToSection('editorSec')">OCR in Editor</button>
        </div>
      </div>
      <div class="card">
        <h3>üé® Palette Extract</h3>
        <div class="small">Get 8 main colors from image ‚Äî tap to copy HEX.</div>
        <div style="margin-top:auto">
          <button class="btn" onclick="scrollToSection('editorSec')">Extract</button>
        </div>
      </div>
    </div>
  </div>

  <!-- IMAGE EDITOR SECTION -->
  <div class="section" id="editorSec">
    <h2 style="color:var(--accent)">Image Editor ‚Äî Background Blur & Ultra Enhance</h2>
    <div class="editor">
      <div class="editor-left card">
        <input id="imgInput" type="file" accept="image/*" class="input-file" />
        <canvas id="editorCanvas" width="900" height="560" style="background:#000"></canvas>
        <div class="controls">
          <button class="btn" id="bgBlurBtn">Background Blur</button>
          <button class="btn" id="ultraBtn">Ultra Enhance (8K-style)</button>
          <button class="btn" id="paletteBtn">Palette Extract</button>
          <button class="btn" id="ocrBtn">Run OCR</button>
          <button class="btn" id="downloadImgBtn">Download PNG</button>
        </div>
        <div class="small" style="margin-top:8px">Tip: For best background blur, upload portrait photos with clear subject.</div>
      </div>

      <div class="editor-right">
        <div class="card">
          <div style="display:flex;align-items:center;gap:10px">
            <div style="width:64px;height:64px;border-radius:8px;background:#001a22;display:flex;align-items:center;justify-content:center;color:var(--accent);font-weight:800">IMG</div>
            <div>
              <div style="font-weight:700">Editor Controls</div>
              <div class="small">Live preview & operations</div>
            </div>
          </div>

          <div id="paletteWrap" style="margin-top:12px;display:flex;flex-wrap:wrap;gap:6px"></div>

          <div id="ocrBox" style="margin-top:12px;display:none;">
            <label class="small">OCR Output</label>
            <textarea id="ocrOutput" style="width:100%;min-height:120px;border-radius:8px;background:rgba(0,0,0,0.5);color:#eaf7ff;padding:8px;border:1px solid var(--glass)"></textarea>
          </div>

        </div>
      </div>
    </div>
  </div>

  <!-- VOICE SECTION -->
  <div class="section" id="voiceSec">
    <h2 style="color:var(--accent)">Voice Enhance (Lite)</h2>
    <div class="card voice-box">
      <div style="display:flex;gap:10px;align-items:center;flex-wrap:wrap">
        <button id="startRec" class="btn">Start</button>
        <button id="stopRec" class="btn" disabled>Stop</button>
        <button id="playRec" class="btn" disabled>Play</button>
        <button id="downloadRec" class="btn" disabled>Download</button>
        <div style="flex:1"></div>
        <div class="small">Up to 30s ‚Ä¢ Client-side processing</div>
      </div>
      <div id="recStatus" class="small" style="margin-top:8px">Idle</div>
      <canvas id="voiceWave" style="width:100%;height:80px;margin-top:10px;background:linear-gradient(180deg,rgba(255,255,255,0.01),transparent);border-radius:8px"></canvas>
      <audio id="voicePlayer" controls style="width:100%;margin-top:8px"></audio>
    </div>
  </div>

  <!-- DEMO SHOWCASE -->
  <div class="section" id="demoShowcase">
    <h2 style="color:var(--accent)">Demo Showcase</h2>
    <div class="card">
      <div style="display:flex;gap:12px;flex-wrap:wrap">
        <div style="flex:1;min-width:240px">
          <img src="https://via.placeholder.com/600x300/001c28/00e6ff?text=Voice+Enhancer+Demo" style="width:100%;border-radius:8px" alt="demo">
        </div>
        <div style="flex:1;min-width:240px">
          <h3>Sell-ready Product</h3>
          <p class="small">Use the buyer pack (README, LICENSE) and demo video to list on IndieMaker or Flippa.</p>
          <div style="margin-top:10px">
            <a class="btn" href="#contact">Contact / Buy</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Contact / footer -->
  <div class="section" id="contact">
    <div class="card">
      <h3>Contact & Info</h3>
      <p class="small">Email: <a href="mailto:addy.ai.contact@gmail.com" style="color:var(--accent)">addy.ai.contact@gmail.com</a></p>
      <div style="margin-top:8px" id="visCounter">Visitors: ‚Äî</div>
    </div>
  </div>

  <footer>¬© 2025 ADDY.AI ‚Äî Built with ‚ù§Ô∏è ‚Äî Demo | For sale: https://gulladj61-sketch.github.io/ADDY-budyy/</footer>
</div>

<!-- External libs -->
<script src="https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.15.0/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/body-pix@2.2.0/dist/body-pix.min.js"></script>

<!-- CORE JS: image editor, bg blur (BodyPix), enhancer, palette, ocr, voice recorder -->
<script>
/* ---- Helper DOM ---- */
const $ = id => document.getElementById(id);

/* ---- Intro sequence hide ---- */
window.addEventListener('load', ()=> {
  setTimeout(()=> {
    document.getElementById('introLoader').style.display='none';
    document.getElementById('mainApp').style.opacity=1;
    window.scrollTo(0,0);
  },1500);
});

/* ---- Visitor counter mock ---- */
(function(){ let c=localStorage.getItem('addy_visit'); if(!c)c=Math.floor(Math.random()*80)+20; else c=parseInt(c)+1; localStorage.setItem('addy_visit',c); $('visCounter').innerText = "Visitors: "+c; })();

/* ---- Image Editor setup ---- */
const imgInput = $('imgInput');
const editorCanvas = $('editorCanvas');
const ctx = editorCanvas.getContext('2d');
let currentImage = new Image(); let originalDataURL = null;
function fitCanvasToImage(img){
  const maxW = 900, maxH = 560;
  let w = img.width, h = img.height;
  const ratio = Math.min(maxW/w, maxH/h, 1);
  w = Math.floor(w*ratio); h = Math.floor(h*ratio);
  editorCanvas.width = w; editorCanvas.height = h;
  ctx.drawImage(img,0,0,w,h);
}
imgInput.addEventListener('change', async (e)=>{
  const file = e.target.files[0]; if(!file) return;
  const url = URL.createObjectURL(file);
  currentImage = new Image();
  currentImage.onload = ()=>{ fitCanvasToImage(currentImage); originalDataURL = editorCanvas.toDataURL('image/png'); };
  currentImage.src = url;
});

/* ---- Background Blur using BodyPix ---- */
let bodyPixNet = null;
async function loadBodyPix(){ if(bodyPixNet) return bodyPixNet; bodyPixNet = await bodyPix.load({architecture:'MobileNetV1'}); return bodyPixNet; }
$('bgBlurBtn').addEventListener('click', async ()=>{
  if(!currentImage.src) return alert('Upload an image first');
  $('bgBlurBtn').disabled=true; $('bgBlurBtn').innerText='Blurring...';
  await loadBodyPix();
  const temp = document.createElement('canvas'); temp.width=currentImage.naturalWidth; temp.height=currentImage.naturalHeight;
  const tctx = temp.getContext('2d'); tctx.drawImage(currentImage,0,0);
  const segmentation = await bodyPixNet.segmentPerson(temp, {internalResolution:'low', segmentationThreshold:0.5});
  // create blurred background
  const off = document.createElement('canvas'); off.width=temp.width; off.height=temp.height; const offCtx = off.getContext('2d');
  offCtx.filter = 'blur(18px)'; offCtx.drawImage(temp,0,0);
  const srcData = tctx.getImageData(0,0,temp.width,temp.height);
  const blurData = offCtx.getImageData(0,0,temp.width,temp.height);
  // composite: where segmentation == 1 => original, else blurred
  for(let i=0;i<segmentation.data.length;i++){
    const m = segmentation.data[i];
    if(m===1){ // person - copy original pixel
      const idx = i*4; blurData.data[idx]=srcData.data[idx]; blurData.data[idx+1]=srcData.data[idx+1]; blurData.data[idx+2]=srcData.data[idx+2]; blurData.data[idx+3]=255;
    }
  }
  // draw scaled to canvas
  const tmpImg = new Image();
  tmpImg.onload = ()=>{ fitCanvasToImage(tmpImg); $('bgBlurBtn').disabled=false; $('bgBlurBtn').innerText='Background Blur'; };
  tmpImg.src = off.toDataURL('image/png');
});

/* ---- Ultra Enhance (pseudo 8K) - client side sharpening + upscaling illusion ---- */
function sharpenImage(imageData, width, height){
  const src = imageData.data;
  const copy = new Uint8ClampedArray(src); // copy
  // simple unsharp mask kernel
  const w = width, h = height;
  const kernel = [0,-1,0,-1,5,-1,0,-1,0];
  for(let y=1;y<h-1;y++){
    for(let x=1;x<w-1;x++){
      for(let c=0;c<3;c++){
        let sum=0; let k=0;
        for(let ky=-1;ky<=1;ky++){ for(let kx=-1;kx<=1;kx++){ const px=(y+ky)*w+(x+kx); sum += copy[px*4+c]*kernel[k++]; } }
        const idx=(y*w+x)*4+c;
        let val = sum;
        val = Math.max(0,Math.min(255,val));
        src[idx]=val;
      }
    }
  }
  return imageData;
}
$('ultraBtn').addEventListener('click', ()=>{
  if(!currentImage.src) return alert('Upload an image first');
  $('ultraBtn').disabled=true; $('ultraBtn').innerText='Enhancing...';
  // upscale canvas 2x then apply sharpen and downscale to create high-frequency boost
  const tmp = document.createElement('canvas'); tmp.width = editorCanvas.width*2; tmp.height = editorCanvas.height*2;
  const tctx = tmp.getContext('2d');
  tctx.imageSmoothingEnabled = true; tctx.imageSmoothingQuality = 'high';
  // draw original scaled up
  tctx.drawImage(editorCanvas,0,0,tmp.width,tmp.height);
  let imgData = tctx.getImageData(0,0,tmp.width,tmp.height);
  imgData = sharpenImage(imgData,tmp.width,tmp.height);
  tctx.putImageData(imgData,0,0);
  // downscale smoothly back to canvas size for perceived detail
  ctx.imageSmoothingEnabled=true; ctx.imageSmoothingQuality='high';
  ctx.clearRect(0,0,editorCanvas.width,editorCanvas.height);
  ctx.drawImage(tmp,0,0,editorCanvas.width,editorCanvas.height);
  $('ultraBtn').disabled=false; $('ultraBtn').innerText='Ultra Enhance (8K-style)';
  alert('Enhanced ‚Äî pseudo 8K look applied');
});

/* ---- Palette Extract ---- */
$('paletteBtn').addEventListener('click', ()=>{
  if(!editorCanvas.width) return alert('Upload an image first');
  const imgData = ctx.getImageData(0,0,editorCanvas.width,editorCanvas.height).data;
  const colors = {};
  for(let i=0;i<imgData.length;i+=4*20){
    const r=imgData[i], g=imgData[i+1], b=imgData[i+2];
    const key = ((r>>4).toString(16)+(g>>4).toString(16)+(b>>4).toString(16));
    colors[key] = {r,g,b};
  }
  const wrap = $('paletteWrap'); wrap.innerHTML='';
  Object.values(colors).slice(0,10).forEach(c=>{
    const hex = '#'+[c.r,c.g,c.b].map(x=>x.toString(16).padStart(2,'0')).join('');
    const d=document.createElement('div'); d.style.width='46px'; d.style.height='46px'; d.style.borderRadius='8px'; d.style.background=hex; d.title=hex; d.style.cursor='pointer';
    d.onclick = ()=>{ navigator.clipboard.writeText(hex); alert('Copied '+hex); };
    wrap.appendChild(d);
  });
});

/* ---- OCR via Tesseract ---- */
$('ocrBtn').addEventListener('click', async ()=>{
  if(!editorCanvas.width) return alert('Upload an image first');
  $('ocrBtn').disabled=true; $('ocrBtn').innerText='Reading...';
  const dataUrl = editorCanvas.toDataURL('image/png');
  const worker = Tesseract.createWorker();
  await worker.load(); await worker.loadLanguage('eng'); await worker.initialize('eng');
  const res = await worker.recognize(dataUrl);
  await worker.terminate();
  const txt = res.data.text.trim();
  if(txt){ $('ocrOutput').value = txt; $('ocrBox').style.display='block'; } else alert('No text found');
  $('ocrBtn').disabled=false; $('ocrBtn').innerText='Run OCR';
});

/* ---- Download image ---- */
$('downloadImgBtn').addEventListener('click', ()=>{
  if(!editorCanvas.width) return alert('Upload an image first');
  const a=document.createElement('a'); a.href = editorCanvas.toDataURL('image/png'); a.download='addy_image.png'; a.click();
});

/* ---- Voice Recorder Enhanced (client-side) ---- */
let mediaRecorder, chunks=[], voiceBlob=null;
const player = $('voicePlayer'), waveCanvas = $('voiceWave'), waveCtx = waveCanvas.getContext('2d');
let audioContext, analyser, sourceNode, raf;
function resizeVoiceCanvas(){ waveCanvas.width = waveCanvas.clientWidth * devicePixelRatio; waveCanvas.height = waveCanvas.clientHeight * devicePixelRatio; }
resizeVoiceCanvas(); window.addEventListener('resize', resizeVoiceCanvas);
$('startRec').addEventListener('click', async ()=>{
  try{
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    chunks=[];
    mediaRecorder.ondataavailable = e => { if(e.data.size>0) chunks.push(e.data); };
    mediaRecorder.onstop = async ()=>{
      voiceBlob = new Blob(chunks,{type:'audio/webm'});
      // process with offline audio (similar to earlier): decode, filters, normalize
      const arrayBuffer = await voiceBlob.arrayBuffer();
      const decodeCtx = new (window.AudioContext || window.webkitAudioContext)();
      const decoded = await decodeCtx.decodeAudioData(arrayBuffer);
      // offline render
      const offline = new OfflineAudioContext(decoded.numberOfChannels, decoded.length, decoded.sampleRate);
      const src = offline.createBufferSource(); src.buffer = decoded;
      const hp = offline.createBiquadFilter(); hp.type='highpass'; hp.frequency.value=180;
      const lp = offline.createBiquadFilter(); lp.type='lowpass'; lp.frequency.value=9000;
      const comp = offline.createDynamicsCompressor(); comp.threshold.value=-40; comp.ratio.value=6;
      const gain = offline.createGain(); gain.gain.value=1.4;
      src.connect(hp); hp.connect(lp); lp.connect(comp); comp.connect(gain); gain.connect(offline.destination);
      src.start(0);
      const rendered = await offline.startRendering();
      // normalize peak
      for(let ch=0;ch<rendered.numberOfChannels;ch++){
        const data = rendered.getChannelData(ch); let peak=0; for(let i=0;i<data.length;i++) peak=Math.max(peak,Math.abs(data[i]));
        if(peak>0){ const norm=0.95/peak; for(let i=0;i<data.length;i++) data[i]*=norm; }
      }
      // convert to wav
      const wavView = audioBufferToWav(rendered);
      const wavBlob = new Blob([wavView], {type:'audio/wav'});
      player.src = URL.createObjectURL(wavBlob);
      $('playRec').disabled=false; $('downloadRec').disabled=false; $('stopRec').disabled=true; $('startRec').disabled=false;
      $('recStatus').innerText = 'Ready ‚Äî processed';
      voiceBlob = wavBlob;
    };
    mediaRecorder.start();
    // live waveform
    audioContext = new AudioContext();
    sourceNode = audioContext.createMediaStreamSource(stream);
    analyser = audioContext.createAnalyser(); analyser.fftSize=2048;
    sourceNode.connect(analyser);
    function draw(){ const bufferLength = analyser.fftSize; const data = new Uint8Array(bufferLength); analyser.getByteTimeDomainData(data); waveCtx.fillStyle='rgba(0,0,0,0)'; waveCtx.clearRect(0,0,waveCanvas.width,waveCanvas.height); waveCtx.lineWidth=2*devicePixelRatio; waveCtx.strokeStyle='#00e6ff'; waveCtx.beginPath();
      const slice = waveCanvas.width / bufferLength; let x=0; for(let i=0;i<bufferLength;i++){ const v = data[i]/128.0; const y = v * waveCanvas.height/2; if(i===0) waveCtx.moveTo(x,y); else waveCtx.lineTo(x,y); x+=slice; } waveCtx.stroke(); raf=requestAnimationFrame(draw);
    }
    draw();
    $('startRec').disabled=true; $('stopRec').disabled=false; $('recStatus').innerText='Recording...';
    setTimeout(()=>{ if(mediaRecorder && mediaRecorder.state==='recording') mediaRecorder.stop(); }, 30000);
  }catch(err){ alert('Mic error: '+err.message); }
});
$('stopRec').addEventListener('click', ()=>{ if(mediaRecorder && mediaRecorder.state==='recording') mediaRecorder.stop(); if(raf) cancelAnimationFrame(raf); $('recStatus').innerText='Processing...'; });
$('playRec').addEventListener('click', ()=>{ if(player.src) player.play(); });
$('downloadRec').addEventListener('click', ()=>{ if(!voiceBlob) return alert('No recording'); const a=document.createElement('a'); a.href = URL.createObjectURL(voiceBlob); a.download='addy_voice.wav'; a.click(); });

/* AudioBuffer -> WAV helper */
function audioBufferToWav(buffer){
  const numChannels = buffer.numberOfChannels; const sampleRate = buffer.sampleRate;
  const format = 1; const bitDepth = 16;
  let result;
  let offset = 0;
  const bytesPerSample = bitDepth/8;
  const blockAlign = numChannels * bytesPerSample;
  const dataSize = buffer.length * blockAlign;
  const bufferArray = new ArrayBuffer(44 + dataSize);
  const view = new DataView(bufferArray);
  function writeString(view, offset, string){ for(let i=0;i<string.length;i++) view.setUint8(offset+i,string.charCodeAt(i)); }
  writeString(view, 0, 'RIFF'); view.setUint32(4, 36 + dataSize, true); writeString(view, 8, 'WAVE');
  writeString(view, 12, 'fmt '); view.setUint32(16, 16, true); view.setUint16(20, format, true); view.setUint16(22, numChannels, true);
  view.setUint32(24, sampleRate, true); view.setUint32(28, sampleRate * blockAlign, true); view.setUint16(32, blockAlign, true); view.setUint16(34, bitDepth, true);
  writeString(view, 36, 'data'); view.setUint32(40, dataSize, true);
  offset = 44;
  const channels = []; for(let i=0;i<numChannels;i++) channels.push(buffer.getChannelData(i));
  for(let i=0;i<buffer.length;i++){
    for(let ch=0;ch<numChannels;ch++){
      let sample = Math.max(-1, Math.min(1, channels[ch][i]));
      view.setInt16(offset, sample < 0 ? sample * 0x8000 : sample * 0x7FFF, true);
      offset += 2;
    }
  }
  return view;
}

/* ---- Utilities ---- */
function scrollToSection(id){ document.getElementById(id).scrollIntoView({behavior:'smooth',block:'start'}); }

/* ---- Resize canvas after image loads if needed ---- */
window.addEventListener('resize', ()=>{ /* canvas auto handled by fitCanvasToImage */ });

/* ---- Auto save original from load to canvas helper for demo ---- */
document.addEventListener('DOMContentLoaded', ()=>{ /* nothing for now */ });

</script>

</body>
</html><!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>ADDY.AI ‚Äî Image Enhance Demo</title>
<meta name="description" content="Client-side Image Enhance & Background Blur demo. Visual enhancement only, no external paid APIs."/>
<style>
  :root{--bg:#07121a;--card:#0b2430;--accent:#00e6ff;--muted:#9fd8ea;}
  body{margin:0;background:linear-gradient(180deg,#020612,var(--bg));font-family:Inter,system-ui,Segoe UI,Roboto,'Poppins',sans-serif;color:#eaf9ff;display:flex;align-items:flex-start;justify-content:center;padding:28px 12px;}
  .wrap{width:100%;max-width:1000px}
  .card{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));border-radius:12px;padding:16px;border:1px solid rgba(255,255,255,0.03);box-shadow:0 10px 40px rgba(0,0,0,0.6)}
  h1{margin:0 0 8px 0;color:var(--accent);font-size:20px}
  p.lead{margin:0 0 12px 0;color:var(--muted);font-size:13px}
  .controls{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:12px}
  .btn{background:var(--accent);color:#00211f;padding:10px 14px;border-radius:8px;border:0;font-weight:700;cursor:pointer}
  .btn.ghost{background:transparent;border:1px solid rgba(255,255,255,0.06);color:#cfeffb}
  .row{display:flex;gap:12px;align-items:center;flex-wrap:wrap}
  #canvasWrap{margin-top:14px;background:#000;border-radius:8px;display:flex;align-items:center;justify-content:center;padding:10px;overflow:hidden}
  canvas{max-width:100%;height:auto;border-radius:6px;display:block}
  input[type=file]{display:none}
  .small{font-size:13px;color:var(--muted)}
  #status{font-size:13px;color:#bfefff;margin-left:8px}
  #progressBar{height:8px;background:rgba(255,255,255,0.04);border-radius:8px;overflow:hidden;margin-top:12px}
  #progressInner{height:100%;width:0;background:linear-gradient(90deg,var(--accent),#00ffa0);transition:width .3s ease}
  footer{margin-top:14px;text-align:center;color:#86d6e8;font-size:13px}
  /* small responsive */
  @media(max-width:640px){ .row{flex-direction:column;align-items:stretch} .controls{justify-content:flex-start} }
</style>
</head>
<body>

<div class="wrap">
  <div class="card">
    <h1>ADDY ‚Äî Image Enhance & Background Blur (Demo)</h1>
    <p class="lead">Upload an image ‚Üí try Background Blur (person-aware if supported) ‚Üí Enhance (sharpen + contrast). Visual improvements only ‚Äî no paid API.</p>

    <div class="controls">
      <label class="btn" id="uploadLabel">Upload Image
        <input type="file" id="fileInput" accept="image/*">
      </label>

      <button class="btn ghost" id="blurBtn">Background Blur</button>
      <button class="btn" id="enhanceBtn">Enhance (Visual)</button>
      <button class="btn ghost" id="resetBtn">Reset</button>
      <button class="btn" id="downloadBtn">Download PNG</button>

      <div id="status" class="small">Idle</div>
    </div>

    <div id="progressBar" aria-hidden="true"><div id="progressInner"></div></div>

    <div id="canvasWrap" style="margin-top:12px">
      <canvas id="workCanvas" width="800" height="500" style="background:#111"></canvas>
    </div>

    <p class="small" style="margin-top:8px">Tip: For best blur, use portrait photos with clear subject. Enhance applies sharpen + contrast + upscale trick (visual).</p>
  </div>

  <footer>¬© ADDY.AI ‚Äî Demo ‚Ä¢ No paid keys ‚Ä¢ Client-side</footer>
</div>

<!-- optional: body-pix for person-aware mask (loaded on demand) -->
<script>
/*
 Single-file client-side visual enhancer + bg blur (demo).
 - Uses optional BodyPix if available -> person-aware BG blur.
 - Enhance: upscale -> unsharp mask -> downscale -> contrast -> sharpen (visual improvement).
 - No false claims. This is a visual demo only.
*/

const fileInput = document.getElementById('fileInput');
const workCanvas = document.getElementById('workCanvas');
const ctx = workCanvas.getContext('2d',{alpha:true});
const blurBtn = document.getElementById('blurBtn');
const enhanceBtn = document.getElementById('enhanceBtn');
const resetBtn = document.getElementById('resetBtn');
const downloadBtn = document.getElementById('downloadBtn');
const status = document.getElementById('status');
const progressInner = document.getElementById('progressInner');

let originalImage = null;
let originalImageDataURL = null;
let bodyPixNet = null;
let busy = false;

function setStatus(text){ status.innerText = text; }
function setProgress(p){ progressInner.style.width = Math.max(0,Math.min(100,p)) + '%'; }

function fitCanvasTo(img){
  // Fit canvas to image but keep max width reasonably for display
  const maxW = 1200, maxH = 800;
  let w = img.naturalWidth || img.width, h = img.naturalHeight || img.height;
  const ratio = Math.min(maxW/w, maxH/h, 1);
  w = Math.round(w*ratio); h = Math.round(h*ratio);
  workCanvas.width = w; workCanvas.height = h;
  ctx.clearRect(0,0,w,h);
  ctx.drawImage(img,0,0,w,h);
}

fileInput.addEventListener('change', (e)=>{
  const f = e.target.files[0]; if(!f) return;
  const url = URL.createObjectURL(f);
  const img = new Image();
  img.onload = ()=>{ originalImage = img; fitCanvasTo(img); originalImageDataURL = workCanvas.toDataURL('image/png'); setStatus('Image loaded'); setProgress(0); };
  img.src = url;
});

// Optional: load BodyPix on demand
async function loadBodyPix(){
  if(window.bodyPix && bodyPixNet) return bodyPixNet;
  setStatus('Loading person segmentation model...');
  try{
    // dynamically insert CDN if not present
    if(!window.bodyPix){
      await new Promise((res,rej)=>{
        const s=document.createElement('script'); s.src='https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.15.0/dist/tf.min.js'; s.onload=res; s.onerror=rej; document.head.appendChild(s);
      });
      await new Promise((res,rej)=>{
        const s=document.createElement('script'); s.src='https://cdn.jsdelivr.net/npm/@tensorflow-models/body-pix@2.2.0/dist/body-pix.min.js'; s.onload=res; s.onerror=rej; document.head.appendChild(s);
      });
    }
    bodyPixNet = await bodyPix.load({architecture:'MobileNetV1', multiplier:0.5});
    setStatus('Segmentation model ready');
    return bodyPixNet;
  }catch(err){
    console.warn('BodyPix load failed',err);
    setStatus('Segmentation not available (fallback will be used)');
    return null;
  }
}

// Background blur: person-aware if possible; fallback: overall blur
blurBtn.addEventListener('click', async ()=>{
  if(!originalImage) return alert('Upload an image first');
  if(busy) return;
  busy = true; setStatus('Preparing blur...'); setProgress(5);
  // draw original to offscreen full-res canvas for mask
  const tmp = document.createElement('canvas'); tmp.width = originalImage.naturalWidth || originalImage.width; tmp.height = originalImage.naturalHeight || originalImage.height;
  const tctx = tmp.getContext('2d');
  tctx.drawImage(originalImage,0,0,tmp.width,tmp.height);
  setProgress(20);

  // try person-aware segmentation
  let mask = null;
  try{
    await loadBodyPix();
    if(bodyPixNet){
      setStatus('Detecting person...');
      const segmentation = await bodyPixNet.segmentPerson(tmp, {internalResolution:'medium', segmentationThreshold:0.6});
      // create mask imageData (1=person)
      const segData = segmentation.data;
      const w = tmp.width, h = tmp.height;
      const maskCanvas = document.createElement('canvas'); maskCanvas.width=w; maskCanvas.height=h; const mctx = maskCanvas.getContext('2d');
      const imgd = mctx.createImageData(w,h);
      for(let i=0;i<segData.length;i++){
        const v = segData[i] ? 255 : 0;
        imgd.data[i*4+0]=v; imgd.data[i*4+1]=v; imgd.data[i*4+2]=v; imgd.data[i*4+3]=255;
      }
      mctx.putImageData(imgd,0,0);
      mask = maskCanvas;
      setProgress(55);
    }
  }catch(e){
    console.warn('seg fail',e);
    setStatus('Segmentation failed ‚Äî using fallback blur');
  }

  // create blurred background
  setStatus('Applying blur...');
  const off = document.createElement('canvas'); off.width = tmp.width; off.height = tmp.height; const offCtx = off.getContext('2d');
  offCtx.filter = 'blur(24px)'; offCtx.drawImage(tmp,0,0);
  setProgress(75);

  if(mask){
    // composite: where mask (person) => original, else blurred
    const orig = tctx.getImageData(0,0,tmp.width,tmp.height);
    const blur = offCtx.getImageData(0,0,tmp.width,tmp.height);
    const maskCtx = mask.getContext('2d'); const maskData = maskCtx.getImageData(0,0,tmp.width,tmp.height).data;
    const res = offCtx.createImageData(tmp.width,tmp.height);
    for(let i=0;i<maskData.length;i+=4){
      const isPerson = maskData[i] > 128;
      const idx = i;
      if(isPerson){
        // copy original pixel
        res.data[idx]=orig.data[idx]; res.data[idx+1]=orig.data[idx+1]; res.data[idx+2]=orig.data[idx+2]; res.data[idx+3]=255;
      } else {
        // copy blurred pixel
        res.data[idx]=blur.data[idx]; res.data[idx+1]=blur.data[idx+1]; res.data[idx+2]=blur.data[idx+2]; res.data[idx+3]=255;
      }
    }
    offCtx.putImageData(res,0,0);
  }
  setProgress(90);
  // draw scaled to display canvas
  const finalImg = new Image();
  finalImg.onload = ()=>{
    fitCanvasTo(finalImg);
    busy=false; setStatus('Background blurred'); setProgress(100);
    setTimeout(()=>setProgress(0),600);
  };
  finalImg.src = off.toDataURL('image/png');
});

// Enhance (visual) ‚Äî upscale ‚Üí unsharp ‚Üí downscale ‚Üí contrast
enhanceBtn.addEventListener('click', async ()=>{
  if(!originalImage) return alert('Upload an image first');
  if(busy) return;
  busy = true; setStatus('Enhancing (visual)...'); setProgress(5);
  // start from current canvas content (so can enhance after blur)
  const srcCanvas = document.createElement('canvas'); srcCanvas.width = workCanvas.width; srcCanvas.height = workCanvas.height;
  const sctx = srcCanvas.getContext('2d'); sctx.drawImage(workCanvas,0,0);
  setProgress(15);

  // upscale (2x) to create more detail for filtering
  const upW = Math.min(srcCanvas.width*2, 2600); // limit large upscales
  const upH = Math.min(srcCanvas.height*2, 1800);
  const up = document.createElement('canvas'); up.width = upW; up.height = upH;
  const uctx = up.getContext('2d'); uctx.imageSmoothingEnabled = true; uctx.imageSmoothingQuality = 'high';
  uctx.drawImage(srcCanvas,0,0,upW,upH);
  setProgress(35);

  // apply unsharp mask (simple convolution)
  try{
    let imgd = uctx.getImageData(0,0,upW,upH);
    imgd = unsharpMask(imgd, upW, upH, 1.0, 1); // radius/amount approx
    uctx.putImageData(imgd,0,0);
  }catch(e){
    console.warn('sharpen fail',e);
  }
  setProgress(65);

  // downscale back to canvas size with high quality
  ctx.imageSmoothingEnabled = true; ctx.imageSmoothingQuality = 'high';
  ctx.clearRect(0,0,workCanvas.width,workCanvas.height);
  ctx.drawImage(up,0,0,workCanvas.width,workCanvas.height);
  setProgress(85);

  // final contrast / brightness / slight vibrance
  try{
    tweakCanvas(ctx, workCanvas.width, workCanvas.height, {contrast:1.08,brightness:1.03,saturation:1.06});
  }catch(e){console.warn(e);}
  setProgress(98);
  setStatus('Enhancement applied (visual).');
  busy=false;
  setTimeout(()=>setProgress(0),700);
});

// Reset
resetBtn.addEventListener('click', ()=>{
  if(!originalImageDataURL) return;
  const img = new Image();
  img.onload = ()=>{ fitCanvasTo(img); setStatus('Reset to original'); };
  img.src = originalImageDataURL;
});

// Download
downloadBtn.addEventListener('click', ()=>{
  if(!workCanvas.width) return alert('No image to download');
  const a = document.createElement('a'); a.href = workCanvas.toDataURL('image/png'); a.download = 'addy_enhanced.png'; a.click();
});

/* ---------- small image processing helpers ---------- */

// Unsharp mask (simple implementation) - applies a lightweight kernel sharpening
function unsharpMask(imageData, w, h, amount=1.0, radius=1){
  // We'll do a simple approximate unsharp using a kernel [-1 -1 -1; -1 9 -1; -1 -1 -1] scaled by amount
  const data = imageData.data;
  const copy = new Uint8ClampedArray(data); // original copy
  const k = [
    -1, -1, -1,
    -1,  9, -1,
    -1, -1, -1
  ];
  const div = 1;
  for(let y=1;y<h-1;y++){
    for(let x=1;x<w-1;x++){
      for(let c=0;c<3;c++){
        let sum = 0, ki=0;
        for(let ky=-1;ky<=1;ky++){
          for(let kx=-1;kx<=1;kx++){
            const px = (y+ky)*w + (x+kx);
            sum += copy[px*4 + c] * k[ki++];
          }
        }
        const idx = (y*w + x)*4 + c;
        let val = sum/div;
        // blend with original based on amount
        val = copy[idx] + (val - copy[idx]) * amount;
        data[idx] = Math.max(0, Math.min(255, val));
      }
      data[(y*w+x)*4+3] = 255;
    }
  }
  return imageData;
}

// contrast/brightness tweak
function tweakCanvas(ctx, w, h, {contrast=1, brightness=1, saturation=1}){
  const img = ctx.getImageData(0,0,w,h);
  const d = img.data;
  // contrast formula
  const cFactor = (259 * (contrast*255 + 255)) / (255 * (259 - contrast*255));
  for(let i=0;i<d.length;i+=4){
    // convert to linear-ish, apply brightness and contrast
    for(let ch=0;ch<3;ch++){
      let val = d[i+ch];
      val = cFactor * (val - 128) + 128; // contrast
      val = val * brightness; // brightness
      d[i+ch] = Math.max(0, Math.min(255, val));
    }
    // saturation (approx) - convert to gray and lerp
    const r=d[i], g=d[i+1], b=d[i+2];
    const gray = 0.2989*r + 0.5870*g + 0.1140*b;
    d[i]   = Math.max(0, Math.min(255, gray + (r - gray) * saturation));
    d[i+1] = Math.max(0, Math.min(255, gray + (g - gray) * saturation));
    d[i+2] = Math.max(0, Math.min(255, gray + (b - gray) * saturation));
  }
  ctx.putImageData(img,0,0);
}

// fitCanvasTo from image or final result
function fitCanvasTo(img){
  const maxW = 1000, maxH = 700;
  let w = img.naturalWidth || img.width, h = img.naturalHeight || img.height;
  const ratio = Math.min(maxW/w, maxH/h, 1);
  w = Math.round(w*ratio); h = Math.round(h*ratio);
  workCanvas.width = w; workCanvas.height = h;
  ctx.clearRect(0,0,w,h);
  ctx.drawImage(img,0,0,w,h);
}

// also allow direct DataURL (for blurred result)
function fitCanvasToDataURL(dataURL){
  const im = new Image();
  im.onload = ()=> fitCanvasTo(im);
  im.src = dataURL;
}

/* End of helpers */
</script>

</body>
</html>
